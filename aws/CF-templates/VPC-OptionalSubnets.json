{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Description" : "Creates a VPC with AWS NAT Gateways in 2 availability-zones, 4-6 subnets (optional Db subnet tier).",

  "Metadata" : {
    "AWS::CloudFormation::Interface" : {
    "ParameterGroups" : [
      {
        "Label"                         : { "default" : "Network Config" },
        "Parameters"                    : [ "VPCCIDRBlock", "PublicSubnetAZ1", "PublicSubnetAZ2", "PrivateSubnetAZ1", "PrivateSubnetAZ2" ]
      },
      {
        "Label"                         : { "default" : "Database Subnet Option" },
        "Parameters"                    : [ "PrivateDBSubnetAZ1", "PrivateDBSubnetAZ2" ]
      },
      {
        "Label"                         : { "default" : "Tagging" },
        "Parameters"                    : [ "OwnerService", "StackEnv" ]
      }
    ],
    "ParameterLabels" : {
        "VPCCIDRBlock"                  : { "default" : "CIDR block for the VPC" },
        "PublicSubnetAZ1"               : { "default" : "Public subnet for AZ1" },
        "PublicSubnetAZ2"               : { "default" : "Public subnet for AZ2" },
        "PrivateSubnetAZ1"              : { "default" : "Private subnet for AZ1" },
        "PrivateSubnetAZ2"              : { "default" : "Private subnet for AZ2" },
        "PrivateDBSubnetAZ1"            : { "default" : "Database subnet for AZ1" },
        "PrivateDBSubnetAZ2"            : { "default" : "Database subnet for AZ2" },
        "OwnerService"                  : { "default" : "Service name" },
        "StackEnv"                      : { "default" : "Environment name" }
      }
    }
  },

  "Parameters" : {
    "VPCCIDRBlock" : {
        "Type"                          : "String",
        "Default"                       : "10.79.0.0/23",
        "Description"                   : "Enter your VPC IP CIDR block.",
        "AllowedPattern"                : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
        "ConstraintDescription"         : "Please enter a valid IP CIDR range of the form x.x.x.x/x."
    },
    "PublicSubnetAZ1" : {
        "Type"                          : "String",
        "Default"                       : "10.79.0.0/26",
        "Description"                   : "IP space for Public subnet in availability zone-1.",
        "AllowedPattern"                : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
        "ConstraintDescription"         : "Please enter a valid IP CIDR range of the form x.x.x.x/x."
    },
    "PublicSubnetAZ2" : {
        "Type"                          : "String",
        "Default"                       : "10.79.0.64/26",
        "Description"                   : "IP space for Public subnet in availability zone-2.",
        "AllowedPattern"                : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
        "ConstraintDescription"         : "Please enter a valid IP CIDR range of the form x.x.x.x/x."
    },
    "PrivateSubnetAZ1" : {
        "Type"                          : "String",
        "Default"                       : "na",
        "Description"                   : "IP space for Private subnet in availability zone-1. (Enter 'na' if not desired)",
        "AllowedPattern"                : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})|na",
        "ConstraintDescription"         : "Please enter a valid IP CIDR range of the form x.x.x.x/x or 'na'."
    },
    "PrivateSubnetAZ2" : {
        "Type"                          : "String",
        "Default"                       : "na",
        "Description"                   : "IP space for Private subnet in availability zone-2. (Enter 'na' if not desired)",
        "AllowedPattern"                : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})|na",
        "ConstraintDescription"         : "Please enter a valid IP CIDR range of the form x.x.x.x/x or 'na'."
    },
    "PrivateDBSubnetAZ1" : {
        "Type"                          : "String",
        "Default"                       : "na",
        "Description"                   : "(Optional) IP space for Private/DB subnet in availability zone-1. (Enter 'na' if not desired)",
        "AllowedPattern"                : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})|na",
        "ConstraintDescription"         : "Please enter a valid IP CIDR range of the form x.x.x.x/x or 'na'."
    },
    "PrivateDBSubnetAZ2" : {
        "Type"                          : "String",
        "Default"                       : "na",
        "Description"                   : "(Optional) IP space for Private/DB subnet for availability zone-2. (Enter 'na' if not desired)",
        "AllowedPattern"                : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})|na",
        "ConstraintDescription"         : "Please enter a valid IP CIDR range of the form x.x.x.x/x or 'na'."
    },
    "OwnerService" : {
        "Type"                          : "String",
        "Default"                       : "cloudteam",
        "Description"                   : "Owner or service name. (For tagging, use lowercase, no spaces, dashes ok.)",
        "AllowedPattern"                : "[-a-z0-9]*",
        "ConstraintDescription"         : "Must be lowercase, no spaces, dashes ok."
    },
    "StackEnv" : {
        "Type"                          : "String",
        "Default"                       : "stage",
        "Description"                   : "Environment name; prod, stage, dev, etc. (For tagging, use lowercase, no spaces, dashes ok.)",
        "AllowedPattern"                : "[-a-z0-9]*",
        "ConstraintDescription"         : "Must be lowercase, no spaces, dashes ok."
    }
  },

  "Conditions" : {
  
    "PriSubAZ1" : {
        "Fn::Not" : [ { "Fn::Equals" : [ { "Ref" : "PrivateSubnetAZ1" }, "na" ] } ]
    },
    "PriSubAZ2" : {
        "Fn::Not" : [ { "Fn::Equals" : [ { "Ref" : "PrivateSubnetAZ2" }, "na" ] } ]
    },
    "AnyPriSub" : {
        "Fn::Or" : [ { "Condition" : "PriSubAZ1" }, { "Condition" : "PriSubAZ2" } ]
    },

    "PriDBSubAZ1" : {
        "Fn::Not" : [ { "Fn::Equals" : [ { "Ref" : "PrivateDBSubnetAZ1" }, "na" ] } ]
    },
    "PriDBSubAZ2" : {
        "Fn::Not" : [ { "Fn::Equals" : [ { "Ref" : "PrivateDBSubnetAZ2" }, "na" ] } ]
    },
    "AnyPriDBSub" : {
        "Fn::Or" : [ { "Condition" : "PriDBSubAZ1" }, { "Condition" : "PriDBSubAZ2" } ]
    }
  },

  "Mappings" : {

    "RegionMap": {
        "us-east-1"                     : { "Abbr" : "ue1" },
        "eu-west-1"                     : { "Abbr" : "ew1" },
        "ap-northeast-1"                : { "Abbr" : "an1" },
        "us-west-1"                     : { "Abbr" : "uw1" },
        "us-west-2"                     : { "Abbr" : "uw2" },
        "ap-southeast-1"                : { "Abbr" : "as1" },
        "ap-southeast-2"                : { "Abbr" : "as2" },
        "sa-east-1"                     : { "Abbr" : "se1" },
        "eu-central-1"                  : { "Abbr" : "ec1" },
                "ap-south-1"            : { "Abbr" : "as3" }
    }
  },

  "Resources" : {
    "ec2VPC" : {
      "Type" : "AWS::EC2::VPC",
        "Properties" : {
          "CidrBlock"                   : { "Ref" : "VPCCIDRBlock" },
          "EnableDnsSupport"            : "true",
          "EnableDnsHostnames"          : "true",
          "InstanceTenancy"             : "default",
        "Tags": [
            {
                "Key"                   : "Stack",
                "Value"                 : { "Ref" : "AWS::StackName" }
            },
            {
                "Key"                   : "Name",
                "Value"                 : {
                                                "Fn::Join" : [
                                                "-",
                                                  [
                                                    { "Ref" : "OwnerService" },
                                                    { "Ref" : "StackEnv" },
                                                     "vpc",
                                                    { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "Abbr" ] }
                                                  ]
                                                ]
                                        }
            }
        ]
      }
    },

    "ec2InternetGW" : {
      "Type" : "AWS::EC2::InternetGateway",
        "Properties" : {
        "Tags": [
            {
                "Key"                   : "Stack",
                "Value"                 : { "Ref" : "AWS::StackName" }
            },
            {
                "Key"                   : "Name",
                "Value"                 : {
                                                "Fn::Join" : [
                                                "-",
                                                  [
                                                    { "Ref" : "OwnerService" },
                                                    { "Ref" : "StackEnv" },
                                                     "igw",
                                                    { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "Abbr" ] }
                                                  ]
                                                ]
                                        }
            }
        ]
      }
    },

    "ec2AttachGateway" : {
      "Type" : "AWS::EC2::VPCGatewayAttachment",
        "Properties" : {
          "VpcId"                       : { "Ref" : "ec2VPC" },
          "InternetGatewayId"           : { "Ref" : "ec2InternetGW" }
      }
    },

    "ec2PublicSubnetAZ1" : {
      "Type" : "AWS::EC2::Subnet",
        "Properties" : {
          "VpcId"                       : { "Ref" : "ec2VPC" },
          "CidrBlock"                   : { "Ref" : "PublicSubnetAZ1" },
          "AvailabilityZone" : {
            "Fn::Select"                : [ "0", { "Fn::GetAZs": "" } ]
          },
        "Tags": [
            {
                "Key"                   : "Stack",
                "Value"                 : { "Ref" : "AWS::StackName" }
            },
            {
                "Key"                   : "Name",
                "Value"                 : {
                                                "Fn::Join" : [
                                                "-",
                                                  [
                                                    { "Ref" : "OwnerService" },
                                                    { "Ref" : "StackEnv" },
                                                     "public-az1",
                                                    { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "Abbr" ] }
                                                  ]
                                                ]
                                        }
            }
        ]
      }
    },
    "ec2PublicSubnetAZ2" : {
      "Type" : "AWS::EC2::Subnet",
        "Properties" : {
          "VpcId"                       : { "Ref" : "ec2VPC" },
          "CidrBlock"                   : { "Ref" : "PublicSubnetAZ2" },
          "AvailabilityZone" : {
            "Fn::Select"                : [ "1", { "Fn::GetAZs": "" } ]
          },
        "Tags": [
            {
                "Key"                   : "Stack",
                "Value"                 : { "Ref" : "AWS::StackName" }
            },
            {
                "Key"                   : "Name",
                "Value"                 : {
                                                "Fn::Join" : [
                                                "-",
                                                  [
                                                    { "Ref" : "OwnerService" },
                                                    { "Ref" : "StackEnv" },
                                                     "public-az2",
                                                    { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "Abbr" ] }
                                                  ]
                                                ]
                                        }
            }
        ]
      }
    },

    "ec2PrivateSubnetAZ1" : {
      "Type" : "AWS::EC2::Subnet",
	  "Condition" : "PriSubAZ1",
        "Properties" : {
          "VpcId"                       : { "Ref" : "ec2VPC" },
          "CidrBlock"                   : { "Ref" : "PrivateSubnetAZ1" },
          "AvailabilityZone" : {
            "Fn::Select"                : [ "0", { "Fn::GetAZs": "" } ]
          },
        "Tags": [
            {
                "Key"                   : "Stack",
                "Value"                 : { "Ref" : "AWS::StackName" }
            },
            {
                "Key"                   : "Name",
                "Value"                 : {
                                                "Fn::Join" : [
                                                "-",
                                                  [
                                                    { "Ref" : "OwnerService" },
                                                    { "Ref" : "StackEnv" },
                                                     "private-az1",
                                                    { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "Abbr" ] }
                                                  ]
                                                ]
                                        }
            }
        ]
      }
    },
    "ec2PrivateSubnetAZ2" : {
      "Type" : "AWS::EC2::Subnet",
	  "Condition" : "PriSubAZ2",
        "Properties" : {
          "VpcId"                       : { "Ref" : "ec2VPC" },
          "CidrBlock"                   : { "Ref" : "PrivateSubnetAZ2" },
          "AvailabilityZone" : {
            "Fn::Select"                : [ "1", { "Fn::GetAZs": "" } ]
          },
        "Tags": [
            {
                "Key"                   : "Stack",
                "Value"                 : { "Ref" : "AWS::StackName" }
            },
            {
                "Key"                   : "Name",
                "Value"                 : {
                                                "Fn::Join" : [
                                                "-",
                                                  [
                                                    { "Ref" : "OwnerService" },
                                                    { "Ref" : "StackEnv" },
                                                     "private-az2",
                                                    { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "Abbr" ] }
                                                  ]
                                                ]
                                        }
            }
        ]
      }
    },

    "ec2PrivateDbSubnetAZ1" : {
      "Type" : "AWS::EC2::Subnet",
      "Condition" : "PriDBSubAZ1",
        "Properties" : {
          "VpcId"                       : { "Ref" : "ec2VPC" },
          "CidrBlock"                   : { "Ref" : "PrivateDBSubnetAZ1" },
          "AvailabilityZone" : {
            "Fn::Select"                : [ "0", { "Fn::GetAZs": "" } ]
          },
        "Tags": [
            {
                "Key"                   : "Stack",
                "Value"                 : { "Ref" : "AWS::StackName" }
            },
            {
                "Key"                   : "Name",
                "Value"                 : {
                                                "Fn::Join" : [
                                                "-",
                                                  [
                                                    { "Ref" : "OwnerService" },
                                                    { "Ref" : "StackEnv" },
                                                     "privatedb-az1",
                                                    { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "Abbr" ] }
                                                  ]
                                                ]
                                        }
            }
        ]
      }
    },
    "ec2PrivateDbSubnetAZ2" : {
      "Type" : "AWS::EC2::Subnet",
      "Condition" : "PriDBSubAZ2",
        "Properties" : {
          "VpcId"                       : { "Ref" : "ec2VPC" },
          "CidrBlock"                   : { "Ref" : "PrivateDBSubnetAZ2" },
          "AvailabilityZone" : {
            "Fn::Select"                : [ "1", { "Fn::GetAZs": "" } ]
          },
        "Tags": [
            {
                "Key"                   : "Stack",
                "Value"                 : { "Ref" : "AWS::StackName" }
            },
            {
                "Key"                   : "Name",
                "Value"                 : {
                                                "Fn::Join" : [
                                                "-",
                                                  [
                                                    { "Ref" : "OwnerService" },
                                                    { "Ref" : "StackEnv" },
                                                     "privatedb-az2",
                                                    { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "Abbr" ] }
                                                  ]
                                                ]
                                        }
            }
        ]
      }
    },

    "ec2PublicRouteTable" : {
      "Type" : "AWS::EC2::RouteTable",
        "Properties" : {
          "VpcId"                       : { "Ref" : "ec2VPC" },
        "Tags": [
            {
                "Key"                   : "Stack",
                "Value"                 : { "Ref" : "AWS::StackName" }
            },
            {
                "Key"                   : "Name",
                "Value"                 : {
                                                "Fn::Join" : [
                                                "-",
                                                  [
                                                    { "Ref" : "OwnerService" },
                                                    { "Ref" : "StackEnv" },
                                                     "public-rtb",
                                                    { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "Abbr" ] }
                                                  ]
                                                ]
                                        }
            }
        ]
      }
    },

    "ec2PrivateRouteTableAZ1" : {
      "Type" : "AWS::EC2::RouteTable",
	  "Condition" : "PriSubAZ1",
        "Properties" : {
          "VpcId"                       : { "Ref" : "ec2VPC" },
        "Tags": [
            {
                "Key"                   : "Stack",
                "Value"                 : { "Ref" : "AWS::StackName" }
            },
            {
                "Key"                   : "Name",
                "Value"                 : {
                                                "Fn::Join" : [
                                                "-",
                                                  [
                                                    { "Ref" : "OwnerService" },
                                                    { "Ref" : "StackEnv" },
                                                     "private-rtb1",
                                                    { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "Abbr" ] }
                                                  ]
                                                ]
                                        }
            }
        ]
      }
    },
    "ec2PrivateRouteTableAZ2" : {
      "Type" : "AWS::EC2::RouteTable",
	  "Condition" : "PriSubAZ2",
        "Properties" : {
          "VpcId"                       : { "Ref" : "ec2VPC" },
        "Tags": [
            {
                "Key"                   : "Stack",
                "Value"                 : { "Ref" : "AWS::StackName" }
            },
            {
                "Key"                   : "Name",
                "Value"                 : {
                                                "Fn::Join" : [
                                                "-",
                                                  [
                                                    { "Ref" : "OwnerService" },
                                                    { "Ref" : "StackEnv" },
                                                     "private-rtb2",
                                                    { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "Abbr" ] }
                                                  ]
                                                ]
                                        }
            }
        ]
      }
    },

    "ec2PrivateDbRouteTableAZ1" : {
      "Type" : "AWS::EC2::RouteTable",
      "Condition" : "PriDBSubAZ1",
        "Properties" : {
          "VpcId"                       : { "Ref" : "ec2VPC" },
        "Tags": [
            {
                "Key"                   : "Stack",
                "Value"                 : { "Ref" : "AWS::StackName" }
            },
            {
                "Key"                   : "Name",
                "Value"                 : {
                                                "Fn::Join" : [
                                                "-",
                                                  [
                                                    { "Ref" : "OwnerService" },
                                                    { "Ref" : "StackEnv" },
                                                     "privatedb-rtb1",
                                                    { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "Abbr" ] }
                                                  ]
                                                ]
                                        }
            }
        ]
      }
    },
    "ec2PrivateDbRouteTableAZ2" : {
      "Type" : "AWS::EC2::RouteTable",
      "Condition" : "PriDBSubAZ2",
        "Properties" : {
          "VpcId"                       : { "Ref" : "ec2VPC" },
        "Tags": [
            {
                "Key"                   : "Stack",
                "Value"                 : { "Ref" : "AWS::StackName" }
            },
            {
                "Key"                   : "Name",
                "Value"                 : {
                                                "Fn::Join" : [
                                                "-",
                                                  [
                                                    { "Ref" : "OwnerService" },
                                                    { "Ref" : "StackEnv" },
                                                     "privatedb-rtb2",
                                                    { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "Abbr" ] }
                                                  ]
                                                ]
                                        }
            }
        ]
      }
    },

    "ec2PubDefaultRoute" : {
      "Type" : "AWS::EC2::Route",
        "Properties" : {
          "RouteTableId"                : { "Ref" : "ec2PublicRouteTable" },
          "DestinationCidrBlock"        : "0.0.0.0/0",
          "GatewayId"                   : { "Ref" : "ec2InternetGW" }
      }
    },

    "ec2PriDefaultRouteAZ1" : {
      "Type" : "AWS::EC2::Route",
	  "Condition" : "PriSubAZ1",
      "DependsOn" : [ "ec2GatewayNAT1" ],
        "Properties" : {
          "RouteTableId"                : { "Ref" : "ec2PrivateRouteTableAZ1" },
          "DestinationCidrBlock"        : "0.0.0.0/0",
          "NatGatewayId"                : { "Ref" : "ec2GatewayNAT1" }
      }
    },
    "ec2PriDefaultRouteAZ2" : {
      "Type" : "AWS::EC2::Route",
	  "Condition" : "PriSubAZ2",
      "DependsOn" : [ "ec2GatewayNAT2" ],
        "Properties" : {
          "RouteTableId"                : { "Ref" : "ec2PrivateRouteTableAZ2" },
          "DestinationCidrBlock"        : "0.0.0.0/0",
          "NatGatewayId"                : { "Ref" : "ec2GatewayNAT2" }
      }
    },
    "ec2PriDbDefaultRouteAZ1" : {
      "Type" : "AWS::EC2::Route",
      "Condition" : "PriDBSubAZ1",
      "DependsOn" : [ "ec2GatewayNAT1" ],
        "Properties" : {
          "RouteTableId"                : { "Ref" : "ec2PrivateDbRouteTableAZ1" },
          "DestinationCidrBlock"        : "0.0.0.0/0",
          "NatGatewayId"                : { "Ref" : "ec2GatewayNAT1" }
      }
    },
    "ec2PriDbDefaultRouteAZ2" : {
      "Type" : "AWS::EC2::Route",
      "Condition" : "PriDBSubAZ2",
      "DependsOn" : [ "ec2GatewayNAT2" ],
        "Properties" : {
          "RouteTableId"                : { "Ref" : "ec2PrivateDbRouteTableAZ2" },
          "DestinationCidrBlock"        : "0.0.0.0/0",
          "NatGatewayId"                : { "Ref" : "ec2GatewayNAT2" }
      }
    },

    "ec2PublicSubnetRouteTableAssocAZ1" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
        "Properties" : {
          "SubnetId"                    : { "Ref" : "ec2PublicSubnetAZ1" },
          "RouteTableId"                : { "Ref" : "ec2PublicRouteTable" }
      }
    },
    "ec2PublicSubnetRouteTableAssocAZ2" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
        "Properties" : {
          "SubnetId"                    : { "Ref" : "ec2PublicSubnetAZ2" },
          "RouteTableId"                : { "Ref" : "ec2PublicRouteTable" }
      }
    },

    "ec2PrivateSubnetRouteTableAssocAZ1" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
	  "Condition" : "PriSubAZ1",
        "Properties" : {
          "SubnetId"                    : { "Ref" : "ec2PrivateSubnetAZ1" },
          "RouteTableId"                : { "Ref" : "ec2PrivateRouteTableAZ1" }
      }
    },
    "ec2PrivateSubnetRouteTableAssocAZ2" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
	  "Condition" : "PriSubAZ2",
        "Properties" : {
          "SubnetId"                    : { "Ref" : "ec2PrivateSubnetAZ2" },
          "RouteTableId"                : { "Ref" : "ec2PrivateRouteTableAZ2" }
      }
    },

    "ec2PrivateDbSubnetRouteTableAssocAZ1" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Condition" : "PriDBSubAZ1",
        "Properties" : {
          "SubnetId"                    : { "Ref" : "ec2PrivateDbSubnetAZ1" },
          "RouteTableId"                : { "Ref" : "ec2PrivateDbRouteTableAZ1" }
      }
    },
    "ec2PrivateDbSubnetRouteTableAssocAZ2" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Condition" : "PriDBSubAZ2",
        "Properties" : {
          "SubnetId"                    : { "Ref" : "ec2PrivateDbSubnetAZ2" },
          "RouteTableId"                : { "Ref" : "ec2PrivateDbRouteTableAZ2" }
      }
    },

    "ec2PublicSubnetNetworkAcl" : {
      "Type" : "AWS::EC2::NetworkAcl",
        "Properties" : {
          "VpcId"                       : { "Ref" : "ec2VPC" },
        "Tags": [
            {
                "Key"                   : "Stack",
                "Value"                 : { "Ref" : "AWS::StackName" }
            },
            {
                "Key"                   : "Name",
                "Value"                 : {
                                                "Fn::Join" : [
                                                "-",
                                                  [
                                                    { "Ref" : "OwnerService" },
                                                    { "Ref" : "StackEnv" },
                                                     "public-acl",
                                                    { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "Abbr" ] }
                                                  ]
                                                ]
                                        }
            }
        ]
      }
    },

    "ec2PublicSubnetAclEntryIn100" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
        "Properties" : {
          "NetworkAclId"                : { "Ref" : "ec2PublicSubnetNetworkAcl" },
          "RuleNumber"                  : "100",
          "Protocol"                    : "-1",
          "RuleAction"                  : "allow",
          "Egress"                      : "false",
          "CidrBlock"                   : { "Ref" : "VPCCIDRBlock" }
        }
    },
    "ec2PublicSubnetAclEntryIn200" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
        "Properties" : {
          "NetworkAclId"                : { "Ref" : "ec2PublicSubnetNetworkAcl" },
          "RuleNumber"                  : "200",
          "Protocol"                    : "6",
          "PortRange"                   : { "From" : "443", "To" : "443" },
          "RuleAction"                  : "allow",
          "Egress"                      : "false",
          "CidrBlock"                   : "0.0.0.0/0"
        }
    },
    "ec2PublicSubnetAclEntryIn300" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
        "Properties" : {
          "NetworkAclId"                : { "Ref" : "ec2PublicSubnetNetworkAcl" },
          "RuleNumber"                  : "300",
          "Protocol"                    : "6",
          "PortRange"                   : { "From" : "80", "To" : "80" },
          "RuleAction"                  : "allow",
          "Egress"                      : "false",
          "CidrBlock"                   : "0.0.0.0/0"
        }
    },
    "ec2PublicSubnetAclEntryIn400" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
        "Properties" : {
          "NetworkAclId"                : { "Ref" : "ec2PublicSubnetNetworkAcl" },
          "RuleNumber"                  : "400",
          "Protocol"                    : "6",
          "PortRange"                   : { "From" : "1024", "To" : "65535" },
          "RuleAction"                  : "allow",
          "Egress"                      : "false",
          "CidrBlock"                   : "0.0.0.0/0"
        }
    },
    "ec2PublicSubnetAclEntryOut100" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
        "Properties" : {
          "NetworkAclId"                : { "Ref" : "ec2PublicSubnetNetworkAcl" },
          "RuleNumber"                  : "100",
          "Protocol"                    : "-1",
          "RuleAction"                  : "allow",
          "Egress"                      : "true",
          "CidrBlock"                   : { "Ref" : "VPCCIDRBlock" }
        }
    },
    "ec2PublicSubnetAclEntryOut200" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
        "Properties" : {
          "NetworkAclId"                : { "Ref" : "ec2PublicSubnetNetworkAcl" },
          "RuleNumber"                  : "200",
          "Protocol"                    : "6",
          "PortRange"                   : { "From" : "1024", "To" : "65535" },
          "RuleAction"                  : "allow",
          "Egress"                      : "true",
          "CidrBlock"                   : "0.0.0.0/0"
        }
    },
    "ec2PublicSubnetAclEntryOut300" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
        "Properties" : {
          "NetworkAclId"                : { "Ref" : "ec2PublicSubnetNetworkAcl" },
          "RuleNumber"                  : "300",
          "Protocol"                    : "6",
          "PortRange"                   : { "From" : "443", "To" : "443" },
          "RuleAction"                  : "allow",
          "Egress"                      : "true",
          "CidrBlock"                   : "0.0.0.0/0"
        }
    },
    "ec2PublicSubnetAclEntryOut400" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
        "Properties" : {
          "NetworkAclId"                : { "Ref" : "ec2PublicSubnetNetworkAcl" },
          "RuleNumber"                  : "400",
          "Protocol"                    : "6",
          "PortRange"                   : { "From" : "80", "To" : "80" },
          "RuleAction"                  : "allow",
          "Egress"                      : "true",
          "CidrBlock"                   : "0.0.0.0/0"
        }
    },

    "ec2PublicSubnetNetworkAclAssocAZ1" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
        "Properties" : {
          "SubnetId"                    : { "Ref" : "ec2PublicSubnetAZ1" },
          "NetworkAclId"                : { "Ref" : "ec2PublicSubnetNetworkAcl" }
      }
    },
    "ec2PublicSubnetNetworkAclAssocAZ2" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
        "Properties" : {
          "SubnetId"                    : { "Ref" : "ec2PublicSubnetAZ2" },
          "NetworkAclId"                : { "Ref" : "ec2PublicSubnetNetworkAcl" }
      }
    },

    "ec2PrivateSubnetNetworkAcl" : {
      "Type" : "AWS::EC2::NetworkAcl",
	  "Condition" : "AnyPriSub",
        "Properties" : {
          "VpcId"                       : { "Ref" : "ec2VPC" },
        "Tags": [
            {
                "Key"                   : "Stack",
                "Value"                 : { "Ref" : "AWS::StackName" }
            },
            {
                "Key"                   : "Name",
                "Value"                 : {
                                                "Fn::Join" : [
                                                "-",
                                                  [
                                                    { "Ref" : "OwnerService" },
                                                    { "Ref" : "StackEnv" },
                                                     "private-acl",
                                                    { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "Abbr" ] }
                                                  ]
                                                ]
                                        }
            }
        ]
      }
    },

    "ec2PrivateSubnetAclEntryIn100" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
	  "Condition" : "AnyPriSub",
        "Properties" : {
          "NetworkAclId"                : { "Ref" : "ec2PrivateSubnetNetworkAcl" },
          "RuleNumber"                  : "100",
          "Protocol"                    : "-1",
          "RuleAction"                  : "allow",
          "Egress"                      : "false",
          "CidrBlock"                   : { "Ref" : "VPCCIDRBlock" }
        }
    },
    "ec2PrivateSubnetAclEntryIn200" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
	  "Condition" : "AnyPriSub",
        "Properties" : {
          "NetworkAclId"                : { "Ref" : "ec2PrivateSubnetNetworkAcl" },
          "RuleNumber"                  : "200",
          "Protocol"                    : "6",
          "PortRange"                   : { "From" : "1024", "To" : "65535" },
          "RuleAction"                  : "allow",
          "Egress"                      : "false",
          "CidrBlock"                   : "0.0.0.0/0"
        }
    },
    "ec2PrivateSubnetAclEntryOut100" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
	  "Condition" : "AnyPriSub",
        "Properties" : {
          "NetworkAclId"                : { "Ref" : "ec2PrivateSubnetNetworkAcl" },
          "RuleNumber"                  : "100",
          "Protocol"                    : "-1",
          "RuleAction"                  : "allow",
          "Egress"                      : "true",
          "CidrBlock"                   : { "Ref" : "VPCCIDRBlock" }
        }
    },
    "ec2PrivateSubnetAclEntryOut200" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
	  "Condition" : "AnyPriSub",
        "Properties" : {
          "NetworkAclId"                : { "Ref" : "ec2PrivateSubnetNetworkAcl" },
          "RuleNumber"                  : "200",
          "Protocol"                    : "6",
          "PortRange"                   : { "From" : "443", "To" : "443" },
          "RuleAction"                  : "allow",
          "Egress"                      : "true",
          "CidrBlock"                   : "0.0.0.0/0"
        }
    },
    "ec2PrivateSubnetAclEntryOut300" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
	  "Condition" : "AnyPriSub",
        "Properties" : {
          "NetworkAclId"                : { "Ref" : "ec2PrivateSubnetNetworkAcl" },
          "RuleNumber"                  : "300",
          "Protocol"                    : "6",
          "PortRange"                   : { "From" : "80", "To" : "80" },
          "RuleAction"                  : "allow",
          "Egress"                      : "true",
          "CidrBlock"                   : "0.0.0.0/0"
        }
    },

    "ec2PrivateDbSubnetNetworkAcl" : {
      "Type" : "AWS::EC2::NetworkAcl",
      "Condition" : "AnyPriDBSub",
        "Properties" : {
          "VpcId"                       : { "Ref" : "ec2VPC" },
        "Tags": [
            {
                "Key"                   : "Stack",
                "Value"                 : { "Ref" : "AWS::StackName" }
            },
            {
                "Key"                   : "Name",
                "Value"                 : {
                                                "Fn::Join" : [
                                                "-",
                                                  [
                                                    { "Ref" : "OwnerService" },
                                                    { "Ref" : "StackEnv" },
                                                     "privatedb-acl",
                                                    { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "Abbr" ] }
                                                  ]
                                                ]
                                        }
            }
        ]
      }
    },

    "ec2PrivateDbSubnetAclEntryIn100" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Condition" : "AnyPriDBSub",
        "Properties" : {
          "NetworkAclId"                : { "Ref" : "ec2PrivateDbSubnetNetworkAcl" },
          "RuleNumber"                  : "100",
          "Protocol"                    : "-1",
          "RuleAction"                  : "allow",
          "Egress"                      : "false",
          "CidrBlock"                   : { "Ref" : "VPCCIDRBlock" }
        }
    },
    "ec2PrivateDbSubnetAclEntryIn200" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Condition" : "AnyPriDBSub",
        "Properties" : {
          "NetworkAclId"                : { "Ref" : "ec2PrivateDbSubnetNetworkAcl" },
          "RuleNumber"                  : "200",
          "Protocol"                    : "6",
          "PortRange"                   : { "From" : "3306", "To" : "3306" },
          "RuleAction"                  : "deny",
          "Egress"                      : "false",
          "CidrBlock"                   : "0.0.0.0/0"
        }
    },
    "ec2PrivateDbSubnetAclEntryIn300" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Condition" : "AnyPriDBSub",
        "Properties" : {
          "NetworkAclId"                : { "Ref" : "ec2PrivateDbSubnetNetworkAcl" },
          "RuleNumber"                  : "300",
          "Protocol"                    : "6",
          "PortRange"                   : { "From" : "6379", "To" : "6379" },
          "RuleAction"                  : "deny",
          "Egress"                      : "false",
          "CidrBlock"                   : "0.0.0.0/0"
        }
    },
    "ec2PrivateDbSubnetAclEntryIn400" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Condition" : "AnyPriDBSub",
        "Properties" : {
          "NetworkAclId"                : { "Ref" : "ec2PrivateDbSubnetNetworkAcl" },
          "RuleNumber"                  : "400",
          "Protocol"                    : "6",
          "PortRange"                   : { "From" : "11211", "To" : "11211" },
          "RuleAction"                  : "deny",
          "Egress"                      : "false",
          "CidrBlock"                   : "0.0.0.0/0"
        }
    },
    "ec2PrivateDbSubnetAclEntryIn500" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Condition" : "AnyPriDBSub",
        "Properties" : {
          "NetworkAclId"                : { "Ref" : "ec2PrivateDbSubnetNetworkAcl" },
          "RuleNumber"                  : "500",
          "Protocol"                    : "6",
          "PortRange"                   : { "From" : "1024", "To" : "65535" },
          "RuleAction"                  : "allow",
          "Egress"                      : "false",
          "CidrBlock"                   : "0.0.0.0/0"
        }
    },
    "ec2PrivateDbSubnetAclEntryOut100" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Condition" : "AnyPriDBSub",
        "Properties" : {
          "NetworkAclId"                : { "Ref" : "ec2PrivateDbSubnetNetworkAcl" },
          "RuleNumber"                  : "100",
          "Protocol"                    : "-1",
          "RuleAction"                  : "allow",
          "Egress"                      : "true",
          "CidrBlock"                   : { "Ref" : "VPCCIDRBlock" }
        }
    },
    "ec2PrivateDbSubnetAclEntryOut200" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Condition" : "AnyPriDBSub",
        "Properties" : {
          "NetworkAclId"                : { "Ref" : "ec2PrivateDbSubnetNetworkAcl" },
          "RuleNumber"                  : "200",
          "Protocol"                    : "6",
          "PortRange"                   : { "From" : "443", "To" : "443" },
          "RuleAction"                  : "allow",
          "Egress"                      : "true",
          "CidrBlock"                   : "0.0.0.0/0"
        }
    },
    "ec2PrivateDbSubnetAclEntryOut300" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Condition" : "AnyPriDBSub",
        "Properties" : {
          "NetworkAclId"                : { "Ref" : "ec2PrivateDbSubnetNetworkAcl" },
          "RuleNumber"                  : "300",
          "Protocol"                    : "6",
          "PortRange"                   : { "From" : "80", "To" : "80" },
          "RuleAction"                  : "allow",
          "Egress"                      : "true",
          "CidrBlock"                   : "0.0.0.0/0"
        }
    },

    "ec2PrivateSubnetNetworkAclAssocAZ1" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
	  "Condition" : "PriSubAZ1",
        "Properties" : {
          "SubnetId"                    : { "Ref" : "ec2PrivateSubnetAZ1" },
          "NetworkAclId"                : { "Ref" : "ec2PrivateSubnetNetworkAcl" }
      }
    },
    "ec2PrivateSubnetNetworkAclAssocAZ2" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
	  "Condition" : "PriSubAZ2",
        "Properties" : {
          "SubnetId"                    : { "Ref" : "ec2PrivateSubnetAZ2" },
          "NetworkAclId"                : { "Ref" : "ec2PrivateSubnetNetworkAcl" }
      }
    },

    "ec2PrivateDbSubnetNetworkAclAssocAZ1" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Condition" : "PriDBSubAZ1",
        "Properties" : {
          "SubnetId"                    : { "Ref" : "ec2PrivateDbSubnetAZ1" },
          "NetworkAclId"                : { "Ref" : "ec2PrivateDbSubnetNetworkAcl" }
      }
    },
    "ec2PrivateDbSubnetNetworkAclAssocAZ2" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Condition" : "PriDBSubAZ2",
        "Properties" : {
          "SubnetId"                    : { "Ref" : "ec2PrivateDbSubnetAZ2" },
          "NetworkAclId"                : { "Ref" : "ec2PrivateDbSubnetNetworkAcl" }
      }
    },

    "ec2IPAddressNAT1" : {
      "Type" : "AWS::EC2::EIP",
	  "Condition" : "PriSubAZ1",
      "Properties" : {
        "Domain"                        : "vpc"
      }
    },
    "ec2GatewayNAT1" : {
      "Type" : "AWS::EC2::NatGateway",
	  "Condition" : "PriSubAZ1",
      "DependsOn" : [ "ec2IPAddressNAT1", "ec2PublicSubnetAZ1" ],
      "Properties" : {
      "AllocationId"                    : { "Fn::GetAtt" : ["ec2IPAddressNAT1", "AllocationId"]},
      "SubnetId"                        : { "Ref" : "ec2PublicSubnetAZ1"}
      }
    },

    "ec2IPAddressNAT2" : {
      "Type" : "AWS::EC2::EIP",
	  "Condition" : "PriSubAZ2",
      "Properties" : {
        "Domain"                        : "vpc"
      }
    },
    "ec2GatewayNAT2" : {
      "Type" : "AWS::EC2::NatGateway",
	  "Condition" : "PriSubAZ2",
      "DependsOn" : [ "ec2IPAddressNAT2", "ec2PublicSubnetAZ2" ],
      "Properties" : {
      "AllocationId"                    : { "Fn::GetAtt" : ["ec2IPAddressNAT2", "AllocationId"]},
      "SubnetId"                        : { "Ref" : "ec2PublicSubnetAZ2"}
      }
    }
  },

  "Outputs" : {

    "VPCId" : {
      "Description"                     : "VPC Id",
      "Value"                           : { "Ref" : "ec2VPC" }
    },
    
    "PubSubnetAZ1" : {
      "Description"                     : "Public Subnet Id for AZ1",
      "Value"                           : { "Fn::Join" : [ " ",
                                                  [
                                                    { "Ref" : "ec2PublicSubnetAZ1" }, "in",
                                                    { "Fn::GetAtt" : [ "ec2PublicSubnetAZ1", "AvailabilityZone" ] }
                                                  ]
                                                ] }
    },
    "PubSubnetAZ2" : {
      "Description"                     : "Public Subnet Id for AZ2",
      "Value"                           : { "Fn::Join" : [ " ",
                                                  [
                                                    { "Ref" : "ec2PublicSubnetAZ2" }, "in",
                                                    { "Fn::GetAtt" : [ "ec2PublicSubnetAZ2", "AvailabilityZone" ] }
                                                  ]
                                                ] }
    },
    "PriSubnetAZ1" : {
	"Condition" : "PriSubAZ1",
      "Description"                     : "Private Subnet Id for AZ1",
      "Value"                           : { "Fn::Join" : [ " ",
                                                  [
                                                    { "Ref" : "ec2PrivateSubnetAZ1" }, "in",
                                                    { "Fn::GetAtt" : [ "ec2PrivateSubnetAZ1", "AvailabilityZone" ] }
                                                  ]
                                                ] }
    },
    "PriSubnetAZ2" : {
	"Condition" : "PriSubAZ1",
      "Description"                     : "Private Subnet Id for AZ2",
      "Value"                           : { "Fn::Join" : [ " ",
                                                  [
                                                    { "Ref" : "ec2PrivateSubnetAZ2" }, "in",
                                                    { "Fn::GetAtt" : [ "ec2PrivateSubnetAZ2", "AvailabilityZone" ] }
                                                  ]
                                                ] }
    },
    "PriDBSubnetAZ1" : {
      "Condition" : "PriDBSubAZ1",
      "Description"                     : "Private/DB Subnet Id for AZ1",
      "Value"                           : { "Fn::Join" : [ " ",
                                                  [
                                                    { "Ref" : "ec2PrivateDbSubnetAZ1" }, "in",
                                                    { "Fn::GetAtt" : [ "ec2PrivateDbSubnetAZ1", "AvailabilityZone" ] }
                                                  ]
                                                ] }
    },
    "PriDBSubnetAZ2" : {
    "Condition" : "PriDBSubAZ2",
      "Description"                     : "Private/DB Subnet Id for AZ2",
      "Value"                           : { "Fn::Join" : [ " ",
                                                  [
                                                    { "Ref" : "ec2PrivateDbSubnetAZ2" }, "in",
                                                    { "Fn::GetAtt" : [ "ec2PrivateDbSubnetAZ2", "AvailabilityZone" ] }
                                                  ]
                                                ] }
    }
  }
}
