{
  "AWSTemplateFormatVersion" : "2010-09-09",
  
  "Description" : "AWS CloudFormation Cross-Stack Reference Sample Template: Setting CodeDeploy Application and Deployment Group for Automating Deployment on Autoscaling Group . ",

  "Parameters": {
    
    "StackName": {
      "Description": "Name of an active CloudFormation stack that contains the  resources, such as CodeDeployTrustRoleARN and AutoScalingGroup name, that will be used in this stack.",
      "Type": "String",
      "MinLength" : 1,
      "MaxLength" : 255,
      "AllowedPattern" : "^[a-zA-Z][-a-zA-Z0-9]*$",
      "Default" : "SampleNetworkConfiguration"
    },
	
	 "Bucket":{
      "Type":"String",
      "Description":"The unique bucket name where deployment distribution Artifact to be located"
    },
   
    
	
	"EC2TagValue":{
      "Description":"The tag value that identifies this as a target for deployments.",
      "Type":"String",
      "AllowedPattern":"[\\x20-\\x7E]*",
      "ConstraintDescription":"Can contain only ASCII characters.",
	  "Default":"msb-asg"
    }
	
	
  },

  
  "Resources" : {
  
	  "CustomResourceInfo": {
      "Type": "Custom::CustomResourceInfo",
      "Properties": {
        "ServiceToken": { "Fn::GetAtt" : ["LookupStackOutputs", "Arn"] },
        "StackName": {
          "Ref": "StackName"
        }
      }
    },
	
	 "MyApplication":{
      "Type":"AWS::CodeDeploy::Application"
    },
    "MyDeploymentGroup":{
      "Type":"AWS::CodeDeploy::DeploymentGroup",
      "DependsOn":"MyApplication",
      "Properties":{
        "ApplicationName":{
          "Ref":"MyApplication"
        },
      
		"AutoScalingGroups" : [ { "Fn::GetAtt" : ["CustomResourceInfo","AutoScalingGroup"] } ],
        
		 "ServiceRoleArn": { "Fn::GetAtt" : ["CustomResourceInfo","CodeDeployTrustRoleARN"] }
        
      }
    },

    "LookupStackOutputs": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Handler": "index.handler",
        "Role": { "Fn::GetAtt" : ["LambdaExecutionRole", "Arn"] },
        "Code": {
          "ZipFile":  { "Fn::Join": ["\n", [
            "var response = require('cfn-response');",
            "exports.handler = function(event, context) {",
            "    console.log('REQUEST RECEIVED:\\n', JSON.stringify(event));",
            "    if (event.RequestType == 'Delete') {",
            "        response.send(event, context, response.SUCCESS);",
            "        return;",
            "    }",
            "    var stackName = event.ResourceProperties.StackName;",
            "    var responseData = {};",
            "    if (stackName) {",
            "        var aws = require('aws-sdk');",
            "        var cfn = new aws.CloudFormation();",
            "        cfn.describeStacks({StackName: stackName}, function(err, data) {",
            "            if (err) {",
            "                responseData = {Error: 'DescribeStacks call failed'};",
            "                console.log(responseData.Error + ':\\n', err);",
            "                response.send(event, context, response.FAILED, responseData);",
            "            }",
            "            else {",
            "                data.Stacks[0].Outputs.forEach(function(output) {",
            "                    responseData[output.OutputKey] = output.OutputValue;",
            "                });",
            "                response.send(event, context, response.SUCCESS, responseData);",
            "            }",
            "        });",
            "    } else {",
            "        responseData = {Error: 'Stack name not specified'};",
            "        console.log(responseData.Error);",
            "        response.send(event, context, response.FAILED, responseData);",
            "    }",
            "};"
          ]]}
        },        
        "Runtime": "nodejs",
        "Timeout": "30"
      }
    },
 
    "LambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
              "Effect": "Allow",
              "Principal": {"Service": ["lambda.amazonaws.com"]},
              "Action": ["sts:AssumeRole"]
          }]
        },
        "Path": "/",
        "Policies": [{
          "PolicyName": "root",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{
                "Effect": "Allow",
                "Action": ["logs:CreateLogGroup","logs:CreateLogStream","logs:PutLogEvents"],
                "Resource": "arn:aws:logs:*:*:*"
            },
            {
                "Effect": "Allow",
                "Action": ["cloudformation:DescribeStacks"],
                "Resource": "*"
            }]
          }
        }]
      }
    }
  },

  "Outputs" : {  
  
    "MyAWSAccountId":{
      "Value":{
        "Ref":"AWS::AccountId"
      }
    },
    "MyApplication":{
      "Value":{
        "Ref":"MyApplication"
      }
    },
    "MyDeploymentGroup":{
      "Value":{
        "Ref":"MyDeploymentGroup"
      }
    }
	
  }
}