{
  "AWSTemplateFormatVersion": "2010-09-09",
        "Metadata" : {
		"CloudFormationScriptName" : "MSB Deployment",
		"CreatedBy" : "Ankit.Bhalla@Amway.com",
		"Purpose" : "Automate creation of MSB Hybris environment buildout",
		"Components" : "1x EC2, 1 x ELB, Autoscaling Group,1 X RDS,Route53 entry",
		"ChangesPipeline" : "Nil"
	},
	
    "Parameters" : {
	
	  "MachineType" : {
		"Description" : "Select the amazon machine type you would like use for Ec2 instance",
		"Type" : "String",
		"Default" : "m4.large"
      },
	  
	  "KeyName" : {
		"Description" : "Select the Keypair name that you want to use for the Ec2 instances",
		"Type": "AWS::EC2::KeyPair::KeyName",
		"Default": "SeaUatMSBWebModernation"
      },
	  
	  "TimeZone" : {
		"Description" : "Enter the timzone that you would like to assign to the machine in the format eg. Asia/Tokyo",
        "Type" : "String",
		"Default" : "Asia/Singapore"
      },

	  "AmiIdValue" : {
		"Description" : "Base OS AMI you would like to choose for deployment",
		"Type": "AWS::EC2::Image::Id",
		"Default": "ami-a59b49c6"
      },
	  
	  "Application" : {
		"Description" : "Enter the name of the Application. Eg. AmwaySEA",
		"Type" : "String",
		"Default": "demo"
		
      },
	  
	  "SubApplication" : {
		"Description" : "Enter the name of the SubApplication. Eg. Inubit",
		"Type" : "String",
		"Default": "hybris"
      },
	  
    "MinFleetSize" : {
		"Description" : "Minimum number of instances in the fleet",
		"Type" : "String",
		"Default" : "1",
		"ConstraintDescription" : "Keep atleast 1 as the value"
    },
	
    "MaxFleetSize" : {
		"Description" : "Maximum number of inubit instances in the fleet",
		"Type" : "String",
		"Default" : "1",
		"ConstraintDescription" : "Ideally you woudn't need more than 4"
    },
	
    "CoolDownPeriod" : {
		"Description" : "The number of seconds after a scaling activity is completed before any further scaling activities can start.",
		"Type" : "String",
		"Default" : "120",
		"ConstraintDescription" : "Give enough room for scaling activities."
    },	
	
	 "BucketName" : {
		"Description" : "S3 Bucket Name. Eg. korinflocsourcerepo ",
		"Type" : "String",
		 "Default": "seamsbuatrepo"
      },
	
	  "BuildScriptPath" : {
		"Description" : "S3 Path of the build script to be executed during first boot. Eg. s3://seainflocsourcerepo/BuildScripts",
		"Type" : "String",
		 "Default": "s3://seainflocsourcerepo/BuildScripts"
      },
	  
	  
        "ENV" : {
		"Description" : "Name of the env to select for downloading packages from the buckets ",
         "Type" : "String",
		"Default": "Uat",
		"AllowedValues": [
			"Dev",
			"Uat",
			"Stg",
			"Tst",
			"Qa",
			"Prd"
		]	
      },
	  
	  "Package" : {
		"Description" : "Select the Package Directory whether you want to deploy  Seahybris msb environment or Solr  ",
         "Type" : "String",
		"Default": "msbapps",
		"AllowedValues": [
			"solr",
			"msbapps"
		]	
      },
	
		
	  "Ec2TagValue" : {
		"Description" : "Name tag to be assigned to Ec2 instances node",
        "Type" : "String",
		 "Default": "msb-demo"		
      },
	  
	   "Ec2TagName" : {
		"Description" : "same as Ec2TagValue Name tag to be assigned to Ec2 instances node",
        "Type" : "String",
		 "Default": "msb-demo"
      },
	  
	  "Ec2TagContact" : {
		"Description" : "Contact email address of the person/group responsible for this application",
        "Type" : "String",
		 "Default": "msb-demo"
      },

	  "Ec2TagAmwayRegion" : {
  		"Description" : "Region tag you want to assign to the Ec2 instance",
        "Type" : "String",
		 "Default": "Malaysia"
		
      },
	  
	  "Ec2TagEnvironment" : {
  		"Description" : "Environment tag you want to assign to the Ec2 instance",
        "Type" : "String",
		"Default": "Prd",
		"AllowedValues": [
			"Dev",
			"uat",
			"Stg",
			"Tst",
			"qa"
			"Prd"
		]
      },
	  
	 
	  "SubnetGroupSubnetIDs" : {
		"Description" : "Select the two Subnets for Hybris Application server where you would like to deploy the stack",
		"Type" : "List<AWS::EC2::Subnet::Id>",
		 "Default": "subnet-260d0e51,subnet-7d0d0718"
  	  },
	  
	  "ELBSubnetGroupSubnetIDs" : {
		"Description" : "Select the two Subnets where you would like to deploy the ELB",
		"Type" : "List<AWS::EC2::Subnet::Id>",
		 "Default": "subnet-260d0e51,subnet-7d0d0718"
  	  },
	  
	  "SNSArnId" : {
		"Description" : "Enter the ARN ID of the SNS Topic to which alerts needs to be sent in case of autoscaling errors. Eg. arn:aws:sns:ap-southeast-1:183887352813:APACRegionalArchitecture",
		"Type" : "String",
		"ConstraintDescription" : "If you don't have one, plesae ensure to create it beforehand.",
		"Default" : "arn:aws:sns:ap-southeast-1:183887352813:SeaQAMSBWebModernation"
		},

    "ScaleUpCPUThreshold" : {
		"Description" : "For ScaleUp Action : The CPU usage threshold for ScaleUp action",
		"Type" : "String",
		"Default" : "80",
		"ConstraintDescription" : "Plesae be careful and refer documentation before inserting the value."
    },
	
    "ScaleUpCheckPeriod" : {
		"Description" : "For ScaleUp - The number of seconds over which the CPU usage is sampled to take an average in order to compare with threshold",
		"Type" : "String",
		"Default" : "60",
		"ConstraintDescription" : "Plesae be careful and refer documentation before inserting the value."
    },
	
    "ScaleUpEvaluationPeriods" : {
		"Description" : "For ScaleUp Action - The number of periods over which the CPU usage is compared to the specified threshold ",
		"Type" : "String",
		"Default" : "5",
		"ConstraintDescription" : "Plesae be careful and refer documentation before inserting the value."
    },
	
    "ScaleDownCPUThreshold" : {
		"Description" : "For ScaleDown Action : The CPU usage threshold for ScaleDown action",
		"Type" : "String",
		"Default" : "20",
		"ConstraintDescription" : "Plesae be careful and refer documentation before inserting the value."
    },
	
    "ScaleDownCheckPeriod" : {
		"Description" : "For ScaleDown - The number of seconds over which the CPU usage is sampled to take an average in order to compare with threshold",
		"Type" : "String",
		"Default" : "300",
		"ConstraintDescription" : "Plesae be careful and refer documentation before inserting the value."
    },
	
    "ScaleDownEvaluationPeriods" : {
		"Description" : "For ScaleDown Action - The number of periods over which the CPU usage is compared to the specified threshold ",
		"Type" : "String",
		"Default" : "4",
		"ConstraintDescription" : "Plesae be careful and refer documentation before inserting the value."
    },
	
	 "EBSVolumeSize" : {
            "Default" : "15",
            "Description" : "The volume size, in gibibytes (GiB) that you want to assign to EBS. This can be a number from 1 - 1024.",
            "Type" : "String"
        },
	
	"SSLCert" : {
	     "Description" : " SSL certificate name already uploaded",
		"Type" : "String",
		"Default" : "myServerCert"
	},
	
	"Path" : {
         "Description":"AWS Path for ssl certificate eg - /",
         "Default":"/",
         "Type":"String"
      },
	
    "ELBHealthyThreshold" : {
		"Description" : "ELB - Specifies the number of consecutive health probe successes required before moving the instance to the Healthy state.",
		"Type" : "String",
		"Default" : "2",
		"ConstraintDescription" : "Plesae be careful and refer documentation before inserting the value."
    },
	
    "ELBHealthCheckInterval" : {
		"Description" : "ELB - Specifies the approximate interval, in seconds, between health checks of an individual instance.",
		"Type" : "String",
		"Default" : "60",
		"ConstraintDescription" : "Plesae be careful and refer documentation before inserting the value."
    },
	
    "ELBHealthCheckTarget" : {
		"Description" : "ELB - Specifies the KeepAlive File target",
		"Type" : "String",
		"Default" : "TCP:9001",
		"ConstraintDescription" : "Plesae be careful and refer documentation before inserting the value."
    },
	
    "ELBHealthCheckTimeout" : {
		"Description" : "ELB - Specifies the amount of time, in seconds, during which no response means a failed health probe. This value must be less than the value for ELBHealthCheckInterval.",
		"Type" : "String",
		"Default" : "50",
		"ConstraintDescription" : "Plesae be careful and refer documentation before inserting the value."
    },
	
    "ELBUnhealthyThreshold" : {
		"Description" : "ELB - Specifies the number of consecutive health probe failures required before moving the instance to the Unhealthy state.",
		"Type" : "String",
		"Default" : "10",
		"ConstraintDescription" : "Plesae be careful and refer documentation before inserting the value."
    },
	
	  "HostedName" : {
		"Description" : "Enter the DNS which needs to be mapped with ELB",
        "Type" : "String",
		 "Default": "ecom-my-msb.preprod.sea.amway.net."
      },
	 
	  "HostedZoneName" : {
		"Description" : "Enter the Route53 Zone name",
        "Type" : "String",
		 "Default": "preprod.sea.amway.net."
      },  
	  
	    "RDSHostedName" : {
		"Description" : "Enter the DNS which needs to be mapped with RDS DB",
        "Type" : "String",
		 "Default": "seahybrisuatdb.preprod.sea.amway.net."
      },
	   
	  "VPCID" : {
	  	"Description" : "Select the VPC where you want deploy the Stack",
		"Type": "AWS::EC2::VPC::Id",
		 "Default": "vpc-a7075ec2"
      },
	  
	  "VpcName" : {
	  	"Description" : "Enter the name of the VPC where the system will be deployed",
		"Type" : "String",
		 "Default": "Apse1SeaPreprod01"
      },
	  
	 
	  
	  "DBName": {
      "Description"      : "The database name",
      "Type"             : "String",
      "MinLength"        : "1",
      "MaxLength"        : "64",
      "AllowedPattern"   : "[a-zA-Z][a-zA-Z0-9]*",
	  "Default"          : "SeaQaMSBWebModernation",
      "ConstraintDescription" : "Must begin with a letter and contain only alphanumeric characters."
    },
    "DBUser": {
      "Description"      : "The database admin account username",
      "Type"             : "String",
      "MinLength"        : "1",
      "MaxLength"        : "16",
      "AllowedPattern"   : "[a-zA-Z][a-zA-Z0-9]*",
	  "Default"          : "hybris",
      "ConstraintDescription" : "Must begin with a letter and contain only alphanumeric characters."
    },
    "DBPassword": {
      "NoEcho"         : "true",
      "Description"    : "The database admin account password",
      "Type"           : "String",
      "MinLength"      : "8",
      "MaxLength"      : "41",
      "AllowedPattern" : "[a-zA-Z0-9]*",
	  "Default"        : "Root12345",
      "ConstraintDescription" : "Must contain only alphanumeric characters."
    },
	
    "DBAllocatedStorage" : {
      "Description"      : "The size of the database (Gb)",
      "Type"             : "Number",
      "MinValue"         : "5",
      "MaxValue"         : "1024",
	  "Default"          : "10",
      "ConstraintDescription" : "Must be between 5 and 1024Gb."
    },
    "DBPort"        : {
      "Description"  : "DB listening port",
      "Type"         : "Number",
      "MinValue"     : "1150",
      "MaxValue"     : "65535",
      "Default"      : "3306",
      "ConstraintDescription" : "Must be between 3300 and 3400"
    },
	
   "DBBackupRetention"   : {
      "Description"       : "The No. of Days to keep backup",
      "Type"              : "Number",
      "MinValue"          : "0",
      "MaxValue"          : "7",
      "Default"           : "5",
      "ConstraintDescription" : "Must be between 0 and 7"
    },
	
    "DBInstanceClass" : {
      "Description"   : "The database instance type",
      "Type"          : "String",
      "AllowedValues" : [ "db.t1.micro", "db.t2.micro", "db.t2.small", "db.t2.medium", 
                          "db.m1.small", "db.m1.medium", "db.m1.large", "db.m1.xlarge", 
                          "db.m2.xlarge", "db.m2.2xlarge", "db.m2.4xlarge", 
                          "db.m3.medium", "db.m3.large", "db.m3.xlarge", "db.m3.2xlarge", 
                          "db.r3.large", "db.r3.xlarge", "db.r3.2xlarge", "db.r3.4xlarge", "db.r3.8xlarge", 
                          "db.m2.xlarge", "db.m2.2xlarge", "db.m2.4xlarge", 
                          "db.cr1.8xlarge"],
	  "Default"          : "db.t2.medium",
      "ConstraintDescription" : "Must select a valid database instance type."
    },
	
    "PubliclyAccessible" : {
      "Description"      : "Create a Publically Accessible RDS database instance",
      "Type"             : "String",
      "AllowedValues"    : [ "true", "false" ],
	  "Default"          : "false",
      "ConstraintDescription" : "Must be either true or false."
    },
	
    "MultiAZ"         : {
      "Description"   : "Create a multi-AZ RDS database instance",
      "Type"          : "String",
      "AllowedValues" : [ "true", "false" ],
	  "Default"       : "false",
      "ConstraintDescription" : "Must be either true or false."
    },
	
	"DBSubnetAZa"    : {
       "Description"  : "Select the subnet for Database Availability Zone A ",
       "Type"         : "AWS::EC2::Subnet::Id",
       "Default"      : "subnet-7c0d0719"
    },
    "DBSubnetAZb"    : {
     "Description"    : "Select the subnet for Database Availability Zone B ",
     "Type"           : "AWS::EC2::Subnet::Id",
     "Default"        : "subnet-270d0e50"
    },
	
    "MinorUpgrade"    : {
       "Description"   : "Minor upgrade engines applied",
      "Type"          : "String",
      "AllowedValues" : [ "true", "false" ],
	  "Default"       : "false",
      "ConstraintDescription" : "Must be either true or false."
    },
	
    "TagDescription" : {
      "Description"  : "A tag description of the RDS instance.",
      "Type"         : "String",
	  "Default"      : "SeaQaMSBWebModernation"
    },
	
	"EndPointName" : {
     "Description" : "The RDS Endpoint Name",
      "Type"       : "String",
      "MinLength"  : "1",
      "MaxLength"  : "16",
	  "Default"      : "Seaqamsb"
    },
	
   "RDSDeletionPolicy" : {
      "Description"    : "Decides whether to delete or snapshot the DB instance on environment termination",
      "Type"           : "String",
      "Default"        : "Snapshot",
      "AllowedValues"  : [ "Delete", "Snapshot" ]
    },
	
    "RDSDBEngine"   : {
      "Description" : "The name of the database engine to use for this instance",
      "Type"        : "String",
      "Default"     : "mariadb"
    },
	
    "RDSDBEngineVer" : {
      "Description"  : "The version number of the database engine",
      "Type"         : "String",
      "Default"      : "10.0.24"
    }	  


    },	
	
 "Mappings": {
    "EnvironmentMapping": {
	   "AmwayLocation1": { "Value" : "0.0.0.0/0"},
	   "AmwayLocation2": { "Value" : "10.0.0.0/8"}
    }
  },
  
  "Resources": {
  
   "AWSDBEC2SecurityGroup" : {
            "Type"       : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription"     : "VPC Security Group for MySQL",
                "SecurityGroupIngress" : [
                    {
                        "IpProtocol" : "tcp",
                        "FromPort"   : { "Ref" : "DBPort" },
                        "ToPort"     : { "Ref" : "DBPort" },
                        "SourceSecurityGroupId": { "Ref": "InstanceSecurityGroup" }
                    },
                   {
                        "IpProtocol" : "tcp",
                        "FromPort"   : { "Ref" : "DBPort" },
                        "ToPort"     : { "Ref" : "DBPort" },
                        "CidrIp" : {
					         "Fn::FindInMap": [ "EnvironmentMapping", "AmwayLocation2", "Value" ]
				          }
                    }
                ],
                "VpcId"              : { "Ref" : "VPCID" }
            }
     },

    "AWSRDSDBSubnetGroup":{  
       "Type"       :"AWS::RDS::DBSubnetGroup",
       "Properties" :{  
            "DBSubnetGroupDescription":"RDS DB Subnet Group",
			  "SubnetIds" : [ { "Ref" : "DBSubnetAZa" },
                                       { "Ref" : "DBSubnetAZb"} ]              
		}
    },
	
	"MyDB" : {
       "Type"       : "AWS::RDS::DBInstance",
       "Properties" : {
        "Engine"                   : { "Ref" : "RDSDBEngine" },
        "EngineVersion"            : { "Ref" : "RDSDBEngineVer" },
        "DBInstanceClass"          : { "Ref" : "DBInstanceClass" },
        "MultiAZ"                  : { "Ref" : "MultiAZ" },
        "AllocatedStorage"         : { "Ref" : "DBAllocatedStorage" },
        "DBInstanceIdentifier"     : { "Ref" : "EndPointName" },
        "DBName"                   : { "Ref" : "DBName" },
        "Port"                     : { "Ref" : "DBPort" },
        "MasterUsername"           : { "Ref" : "DBUser" },
        "MasterUserPassword"       : { "Ref" : "DBPassword" },
        "VPCSecurityGroups"         : [ { "Ref" : "AWSDBEC2SecurityGroup"  } ],
        "DBSubnetGroupName"        : { "Ref"  : "AWSRDSDBSubnetGroup" },
        "PubliclyAccessible"       : { "Ref" : "PubliclyAccessible" },
        "BackupRetentionPeriod"    : { "Ref" : "DBBackupRetention"},
        "AutoMinorVersionUpgrade"  : { "Ref" : "MinorUpgrade"},
        "Tags" : [ 
					{
						"Key" : "Name", 
						"Value" : { "Ref" : "Ec2TagValue" } 
					},
					
					{
						"Key" : "Environment", 
						"Value" : { "Ref" : "Ec2TagEnvironment" } 
					},
					
					{
						"Key" : "Application", 
						"Value" : { "Ref" : "Application" } 
					},						
					
					{
						"Key" : "Contact", 
						"Value" : { "Ref" : "Ec2TagContact" } 
					},										

					{
						"Key" : "SubApplication", 
						"Value" : { "Ref" : "SubApplication" } 
					},										

					{
						"Key": "FQN",
						"Value": {
							"Fn::Join" : [ "/", [
								{ "Ref":"AWS::AccountId" },
								{ "Ref" : "Ec2TagAmwayRegion" },
								{ "Ref" : "Ec2TagEnvironment" },
								{ "Ref" : "VpcName" },
								"Sg",
								"Private",
								{ "Ref" : "Application" },
								{ "Ref" : "SubApplication" },
								{ "Ref" : "Ec2TagValue" }
							]]
						}
					}
				]
      },
      "DeletionPolicy" : "Snapshot"
    },
	  	 
 
	"ElbSecurityGroup" : {
		"Type" : "AWS::EC2::SecurityGroup",
		"Properties" : {
        "VpcId" : { "Ref" : "VPCID" },
		"Tags" : [ 
					{
						"Key" : "Name", 
						"Value" : { 
						"Fn::Join" : ["-", [{ "Ref" : "Ec2TagValue" }, "cloudfront" ]]
						 } 
						
					},
					
					{
						"Key" : "AutoUpdate", 
						"Value" : "true"
					},
					
					{
						"Key" : "Environment", 
						"Value" : { "Ref" : "Ec2TagEnvironment" } 
					},
					
					{
						"Key" : "Application", 
						"Value" : { "Ref" : "Application" } 
					},						
					
					{
						"Key" : "Contact", 
						"Value" : { "Ref" : "Ec2TagContact" } 
					},										

					{
						"Key" : "SubApplication", 
						"Value" : { "Ref" : "SubApplication" } 
					},										

					{
						"Key": "FQN",
						"Value": {
							"Fn::Join" : [ "/", [
								{ "Ref":"AWS::AccountId" },
								{ "Ref" : "Ec2TagAmwayRegion" },
								{ "Ref" : "Ec2TagEnvironment" },
								{ "Ref" : "VpcName" },
								"Sg",
								"Private",
								{ "Ref" : "Application" },
								{ "Ref" : "SubApplication" },
								{ "Ref" : "Ec2TagValue" }
							]]
						}
					}
				],
        "GroupDescription" : "Enable traffic from coporate network to Elb",
        "SecurityGroupIngress" : [
			{
				"IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : {
					"Fn::FindInMap": [ "EnvironmentMapping", "AmwayLocation1", "Value" ]
				}
			},
			
			{
				"IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "CidrIp" : {
					"Fn::FindInMap": [ "EnvironmentMapping", "AmwayLocation1", "Value" ]
				}
			}
			
			
        ]
      }
    },
	
	
	"InstanceSecurityGroup" : {
		"Type" : "AWS::EC2::SecurityGroup",
		"DependsOn": "ElbSecurityGroup",
		"Properties" : {
        "VpcId" : { "Ref" : "VPCID" },
		"Tags" : [ 
					{
						"Key" : "Name", 
						"Value" : { "Ref" : "Ec2TagValue" } 
					},
					
					{
						"Key" : "Environment", 
						"Value" : { "Ref" : "Ec2TagEnvironment" } 
					},
					
					{
						"Key" : "Application", 
						"Value" : { "Ref" : "Application" } 
					},						
					
					{
						"Key" : "Contact", 
						"Value" : { "Ref" : "Ec2TagContact" } 
					},										

					{
						"Key" : "SubApplication", 
						"Value" : { "Ref" : "SubApplication" } 
					},										

					{
						"Key": "FQN",
						"Value": {
							"Fn::Join" : [ "/", [
								{ "Ref":"AWS::AccountId" },
								{ "Ref" : "Ec2TagAmwayRegion" },
								{ "Ref" : "Ec2TagEnvironment" },
								{ "Ref" : "VpcName" },
								"Sg",
								"Private",
								{ "Ref" : "Application" },
								{ "Ref" : "SubApplication" },
								{ "Ref" : "Ec2TagValue" }
							]]
						}
					}
				],
        "GroupDescription" : "Enable SSH traffic from corporate network and traffic from ELB",
        "SecurityGroupIngress" : [
			{
				"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : {
					"Fn::FindInMap": [ "EnvironmentMapping", "AmwayLocation2", "Value" ]
				}	
			},
			
			{
				"IpProtocol" : "tcp", "FromPort" : "9001", "ToPort" : "9001", "SourceSecurityGroupId": { "Ref": "ElbSecurityGroup" }
			},
			
			{
				"IpProtocol" : "tcp", "FromPort" : "9002", "ToPort" : "9002", "SourceSecurityGroupId": { "Ref": "ElbSecurityGroup" }
			}
			
        ]
      }
    },

   
   "Ec2InstanceRole": {
         "Type": "AWS::IAM::Role",
         "Properties": {
            "AssumeRolePolicyDocument": {
               "Version" : "2012-10-17",
               "Statement": [ {
                  "Effect": "Allow",
                  "Principal": {
                     "Service": [ "ec2.amazonaws.com" ]
                  },
                  "Action": [ "sts:AssumeRole" ]
               } ]
            },
            "Path": "/",
            "Policies": [ {
               "PolicyName": { "Ref" : "Ec2TagValue" },
               "PolicyDocument": {
                  "Version" : "2012-10-17",
                  "Statement": [ {
                     "Effect": "Allow",
                     "Action": [
								"s3:Get*",
								"s3:List*",
								"s3:Put*",
								 "ec2:*",
								"logs:*",
								"autoscaling:*",
								"cloudwatch:*",
                                "sns:*"    
								],
                     "Resource": "*"
                  } ]
               }
               } ]
            }
      },
	  
	   "Ec2InstanceProfile": {
         "Type": "AWS::IAM::InstanceProfile",
         "Properties": {
            "Path": "/",
            "Roles": [ {
               "Ref": "Ec2InstanceRole"
            } ]
         }
      },
	  
	  "CodeDeployTrustRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Sid": "1",
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "codedeploy.us-east-1.amazonaws.com",
                  "codedeploy.us-west-2.amazonaws.com",
				  "codedeploy.ap-southeast-1.amazonaws.com",
                  "codedeploy.ap-southeast-2.amazonaws.com",
				  "codedeploy.ap-northeast-1.amazonaws.com"
                ]
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/"
      }
    },
	
    "CodeDeployRolePolicies": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "CodeDeployPolicy",
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Resource": [
                "*"
              ],
              "Action": [
                "ec2:Describe*"
              ]
            },
            {
              "Effect": "Allow",
              "Resource": [
                "*"
              ],
              "Action": [
                "autoscaling:CompleteLifecycleAction",
                "autoscaling:DeleteLifecycleHook",
                "autoscaling:DescribeLifecycleHooks",
                "autoscaling:DescribeAutoScalingGroups",
                "autoscaling:PutLifecycleHook",
                "autoscaling:RecordLifecycleActionHeartbeat"
              ]
            }
          ]
        },
        "Roles": [
          {
            "Ref": "CodeDeployTrustRole"
          }
        ]
      }
    },
	
  	
	"LogsBucket": {
      "Type": "AWS::S3::Bucket",
      "DeletionPolicy" : "Retain"
    },
	
    "LogsBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "LogsBucket"
        },
        "PolicyDocument": {
          "Version": "2008-10-17",
          "Statement": [
            {
              "Sid": "ELBAccessLogs20130930",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [ "", [ "arn:aws:s3:::", { "Ref": "LogsBucket" }, "/", "Logs", "/AWSLogs/", { "Ref": "AWS::AccountId" }, "/*" ] ]
              },
              "Principal": "*",
              "Action": [ "s3:PutObject" ]
            }
          ]
        }
      }
    },
	

	"ElasticLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
		"LoadBalancerName" : { "Fn::Join" : [ "", [{ "Ref" : "Application" }, "Elb"]]},
		"CrossZone" : "True",		 
        "LBCookieStickinessPolicy" : [{
          "PolicyName" : "myLBPolicy",
          "CookieExpirationPeriod" : "86400"
        } ],
		"Tags" : [ 
					{
						"Key" : "Name", 
						"Value" : { "Ref" : "Ec2TagValue" } 
					},
					
					{
						"Key" : "Environment", 
						"Value" : { "Ref" : "Ec2TagEnvironment" } 
					},
					
					{
						"Key" : "Application", 
						"Value" : { "Ref" : "Application" } 
					},						
					
					{
						"Key" : "Contact", 
						"Value" : { "Ref" : "Ec2TagContact" } 
					},										

					{
						"Key" : "SubApplication", 
						"Value" : { "Ref" : "SubApplication" } 
					},										

					{
						"Key": "FQN",
						"Value": {
							"Fn::Join" : [ "/", [
								{ "Ref":"AWS::AccountId" },
								{ "Ref" : "Ec2TagAmwayRegion" },
								{ "Ref" : "Ec2TagEnvironment" },
								{ "Ref" : "VpcName" },
								"Elb",
								"Private",
								{ "Ref" : "Application" },
								{ "Ref" : "SubApplication" },
								{ "Ref" : "Ec2TagValue" }
							]]
						}
					}
				],	
		
        "Subnets": { "Ref": "ELBSubnetGroupSubnetIDs" },
        "HealthCheck": {
          "HealthyThreshold": { "Ref": "ELBHealthyThreshold" },
          "Interval": { "Ref": "ELBHealthCheckInterval" },
          "Target": { "Ref": "ELBHealthCheckTarget" },
          "Timeout": { "Ref": "ELBHealthCheckTimeout" },
          "UnhealthyThreshold": { "Ref": "ELBUnhealthyThreshold" }
        },
        "SecurityGroups": [
          { "Ref" : "ElbSecurityGroup" }
        ],
        "Listeners": [
          {
            "InstancePort": "9001",
            "LoadBalancerPort": "80",
            "Protocol": "HTTP"
          },
        
          {
            "InstancePort": "9002",
			 "InstanceProtocol"  : "HTTPS",
            "LoadBalancerPort": "443",
			"Protocol": "HTTPS",
             "PolicyNames" : [ "myLBPolicy" ],
			 "SSLCertificateId" : {
                 "Fn::Join":[
                      "",
                      [
                       "arn:aws:iam::",
                         {
                           "Ref":"AWS::AccountId"
                        },
                       ":server-certificate",
                         {
                           "Ref":"Path"
                         },
					  {
                           "Ref":"SSLCert"
                       }
           ]
        ]
      }      
          }
        ],
		
		"ConnectionDrainingPolicy": {
			"Enabled" : "true",
			"Timeout" : "60"
		},
		
		  "AccessLoggingPolicy": {
          "S3BucketName": {
            "Ref": "LogsBucket"
          },
          "S3BucketPrefix": "Logs",
          "Enabled": "true",
          "EmitInterval": "60"
        }
	  },
	  "DependsOn": "LogsBucketPolicy"	
    },
	
	   "myDNS" : {
        "Type" : "AWS::Route53::RecordSetGroup",
        "Properties" : {
          "HostedZoneName" : { "Ref" : "HostedZoneName" },
          "Comment" : "Zone apex alias targeted to myELB LoadBalancer.",
          "RecordSets" : [
            {
              "Name" : { "Ref" : "HostedName" },
              "Type" : "A",
              "AliasTarget" : {
                  "HostedZoneId" : { "Fn::GetAtt" : ["ElasticLoadBalancer", "CanonicalHostedZoneNameID"] },
                  "DNSName" : { "Fn::GetAtt" : ["ElasticLoadBalancer","DNSName"] }
              }
            }
          ]
        }
	},
	
	
	"myRDSDNS" : {
        "Type" : "AWS::Route53::RecordSetGroup",
        "Properties" : {
         "HostedZoneName" : { "Ref" : "HostedZoneName" },
          "Comment" : "Zone apex alias targeted to DB RDS CNAME entry.",
          "RecordSets" : [
           {
                    "Name" : 	{ "Ref" : "RDSHostedName" },
                    "Type" : "CNAME",
                    "TTL" : "900",
                    "ResourceRecords" : [{ "Fn::GetAtt": [ "MyDB", "Endpoint.Address" ] }]
                  }
          ]
        }
	},
	
	 
	
	"AutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
		"AvailabilityZones": { "Fn::GetAZs" : { "Ref" : "AWS::Region" } },
		"Cooldown": { "Ref" : "CoolDownPeriod" },
        "DesiredCapacity": { "Ref" : "MinFleetSize" },
        "MaxSize": { "Ref" : "MaxFleetSize" },
		"MinSize" : { "Ref" : "MinFleetSize" },
		"MetricsCollection" : [
			{
				"Granularity": "1Minute"
			}
		],
        "HealthCheckGracePeriod": "60",
        "HealthCheckType": "ELB",
        "VPCZoneIdentifier": { "Ref" : "SubnetGroupSubnetIDs" },
		"NotificationConfiguration": {
          "TopicARN": { "Ref" : "SNSArnId" },
          "NotificationTypes": [
            "autoscaling:EC2_INSTANCE_LAUNCH",
            "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
            "autoscaling:EC2_INSTANCE_TERMINATE",
            "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"
          ]
        },
		"TerminationPolicies": [
			"OldestInstance"
		],
        "LaunchConfigurationName": { "Ref": "LaunchConfig" },
		
		"LoadBalancerNames": [ { "Ref" : "ElasticLoadBalancer" } ],
		
        "Tags": [ 
					{
						"Key" : "Name", 
						"Value" : { "Ref" : "Ec2TagValue" },
						"PropagateAtLaunch": true
					},
					
					{
						"Key" : "Contact", 
						"Value" : { "Ref" : "Ec2TagContact" },
						"PropagateAtLaunch": true
					},	
					
					{
						"Key" : "Environment", 
						"Value" : { "Ref" : "Ec2TagEnvironment" } ,
						"PropagateAtLaunch": true
					},
					
					{
						"Key" : "Application", 
						"Value" : { "Ref" : "Application" } ,
						"PropagateAtLaunch": true
					},										

					{
						"Key" : "SubApplication", 
						"Value" : { "Ref" : "SubApplication" } ,
						"PropagateAtLaunch": true
					},										

					{
						"Key": "FQN",
						"Value": {
							"Fn::Join" : [ "/", [
								{ "Ref":"AWS::AccountId" },
								{ "Ref" : "Ec2TagAmwayRegion" },
								{ "Ref" : "Ec2TagEnvironment" },
								{ "Ref" : "VpcName" },
								"AutoScaling",
								"Private",
								{ "Ref" : "Application" },
								{ "Ref" : "SubApplication" },
								{ "Ref" : "Ec2TagValue" }
							]]
						},
						"PropagateAtLaunch": true
					}
				]
      }
    },
	

    "LaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
	
      "Properties": {
        "AssociatePublicIpAddress" : false,
		"ImageId": { "Ref" : "AmiIdValue" },
        "InstanceType": { "Ref" : "MachineType" },
		"SecurityGroups" : [ {"Ref" : "InstanceSecurityGroup"} ],
		"IamInstanceProfile" : {"Ref" : "Ec2InstanceProfile"} ,
        "KeyName": { "Ref" : "KeyName" },
        "InstanceMonitoring": true,
		"UserData": {
				 "Fn::Base64": {
					 "Fn::Join": [
					   "",
					   [
						"#!/bin/bash\n",	
                         "# Version: 1.0\n",	
                          "yum -y update\n",
						  "mkdir /usr/local/BuildFiles\n",
                          "yum update -y aws-cfn-bootstrap\n", 
                         "export VPCID=",{ "Ref" : "VPCID" },"\n",
					     "export AutoScalingGroup=","YES","\n",
						 "export ENV=",{ "Ref" : "ENV" },"\n",
						 "export Package=",{ "Ref" : "Package" },"\n",
					     "export S3Bucket=",{ "Ref" : "BucketName" },"\n",
						  "export BucketName=",{ "Ref" : "BucketName" },"\n",  
						  "export HostedZoneName=",{ "Ref" : "HostedZoneName" },"\n",
					     "export Ec2InstanceRole=",{ "Ref" : "Ec2InstanceRole" },"\n",
					    "export Ec2TagName=", { "Ref" : "Ec2TagName" },"\n",
						"export Ec2TagValue=", { "Ref" : "Ec2TagValue" },"\n",
					    "export BuildScriptPath=", { "Ref" : "BuildScriptPath" },"\n",
					    "export Environment=", { "Ref" : "Ec2TagEnvironment" },"\n",
					    "export APP=",{ "Ref" : "Application" },"\n",
					    "export SUBAPP=",{ "Ref" : "SubApplication" },"\n",
					    "export AWSRegion=",{ "Ref" : "AWS::Region" },"\n",
					  	"export TimeZone=",{ "Ref" : "TimeZone" },"\n",	
					    "export AmwayLocation1=",{"Fn::FindInMap": [ "EnvironmentMapping", "AmwayLocation1", "Value" ]},"\n",
					    "export AmwayLocation2=",{"Fn::FindInMap": [ "EnvironmentMapping", "AmwayLocation2", "Value" ]},"\n",
					    "export HTTPBuildPath=https://s3-$AWSRegion.amazonaws.com/$(echo $BuildScriptPath|cut -d/ -f3,4)\n",
					    "cd /usr/local/BuildFiles\n",
					     "/usr/bin/curl $HTTPBuildPath/",{"Fn::Join" : [ "/", [{ "Ref" : "Ec2TagEnvironment" },{ "Ref" : "Ec2TagName" },"Master.sh"]]},
					     " -O\n",					
					    "bash /usr/local/BuildFiles/Master.sh","\n",					
							"/opt/aws/bin/cfn-init -v  ",
                             "         -s ", { "Ref" : "AWS::StackId" },
                             "         --resource LaunchConfig ",
                             "         --region ", { "Ref" : "AWS::Region" }, "\n",
			                   "# All is well, so signal success.\n",
                              "/opt/aws/bin/cfn-signal -e 0 -r \"AWS CodeDeploy Agent setup complete.\" '",
							  { 
							  "Ref": "WaitHandle" 
							  },
							  "'\n"
					   ]
					]
				}
			},
		"BlockDeviceMappings": [
          {"DeviceName": "/dev/xvda","Ebs": { "VolumeSize" : { "Ref" : "EBSVolumeSize" } } }
        ]
      },
	  
	     "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "config" : {
		    "packages" : {
			  "yum" : {
                 "unzip" : []
               }
			},			
			
            "files" : {
              "/etc/cfn/cfn-hup.conf" : {
                "content" : { "Fn::Join" : ["", [
                  "[main]\n",
                  "stack=", { "Ref" : "AWS::StackId" }, "\n",
                  "region=", { "Ref" : "AWS::Region" }, "\n"
                  ]]},
				  "mode"    : "000400",
                  "owner"   : "root",
                  "group"   : "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
                "content": { "Fn::Join" : ["", [
                  "[cfn-auto-reloader-hook]\n",
                  "triggers=post.update\n",
                  "path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                  "action=/opt/aws/bin/cfn-init -v -s ", { "Ref" : "AWS::StackId" },
                      " -r LaunchConfig",
                      " --region ", { "Ref" : "AWS::Region" }, "\n",
					  "runas=root\n"
                ]]}
              }
            },
			
            "services" : {
              "sysvinit" : {
                "cfn-hup" : {
                  "enabled" : "true",
                  "ensureRunning" : "true",
                  "files" : ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]
                }
              }
            }
          }
        },
		"AWS::CloudFormation::Authentication": {
        "rolebased" : {
        "type": "S3",
        "buckets": [ { "Ref": "BucketName" } ],
        "roleName": { "Ref": "Ec2InstanceRole" }
         }
        }
      }
    },
	
	"WaitHandle" : {
     "Type" : "AWS::CloudFormation::WaitConditionHandle"
   },
   
   "WaitCondition" : {
     "Type" : "AWS::CloudFormation::WaitCondition",
     "DependsOn" : "AutoScalingGroup",	
     "Properties" : {
         "Handle" : { "Ref" : "WaitHandle" },
		 "Timeout" : "1500"
       }
	   },
	
	
    "ScalingDecreaseGroupSize": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "Cooldown": "300",
        "ScalingAdjustment": "-1",
        "AutoScalingGroupName": {
          "Ref": "AutoScalingGroup"
        }
      }
    },
	
    "ScalingIncreaseGroupSize": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "Cooldown": "60",
        "ScalingAdjustment": "1",
        "AutoScalingGroupName": {
          "Ref": "AutoScalingGroup"
        }
      }
    }
	
	  
  },
  "Outputs" : {
		"ElbDnsName" : {
			"Description": "ELB DNS Name",  
			"Value" : { "Fn::GetAtt" : [ "ElasticLoadBalancer" , "DNSName" ] }
		},
		
 "AutoScalingGroup" : {
    "Description" : "Auto Scaling Group Reference ID",
    "Value" : { "Ref" : "AutoScalingGroup" }
  },
  
  "SecurityGroupName" : {
		"Description": "Security Group Name for ASG Instances",  
			"Value" : { "Fn::GetAtt" : [ "InstanceSecurityGroup" , "GroupId" ] }
		},
  
  	"JDBCConnectionString": {
      "Description" : "JDBC connection string for database",
      "Value" : { "Fn::Join": [ "", [ "jdbc:mysql://",
                                      { "Fn::GetAtt": [ "MyDB", "Endpoint.Address" ] },
                                      ":",
                                      { "Fn::GetAtt": [ "MyDB", "Endpoint.Port" ] },
                                      "/",
                                      { "Ref": "DBName" }]]}
    },
    "DBAddress" : {
      "Description" : "Address of database endpoint",
      "Value" : { "Fn::GetAtt": [ "MyDB", "Endpoint.Address" ] }
    },
	
    "DBPort" : {
      "Description" : "Database endpoint port number",
      "Value" : { "Fn::GetAtt": [ "MyDB", "Endpoint.Port" ] }
    },
 	
		"CodeDeployTrustRoleARN": {
      "Value": {
        "Fn::GetAtt": [
          "CodeDeployTrustRole",
          "Arn"
        ]
      }
    }
	
  },
  "Description": "MSB Deployment Cloudformation Template"
}