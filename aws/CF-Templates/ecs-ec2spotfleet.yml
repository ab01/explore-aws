---
AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
    Default: awsmeter
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Select a VPC that allows instances to access the Internet.
    Default: vpc-ffce1798
  PublicSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Select public subnets in your VPC for internet facing
    Default: subnet-6b019746,subnet-00084558
  DesiredCapacity:
    Type: Number
    Default: '2'
    Description: Number of instances to launch in your ECS cluster.
  MinSize:
    Type: Number
    Default: '2'
    Description: Minimum number of instances that can be launched in your ECS cluster.
  MaxSize:
    Type: Number
    Default: '4'
    Description: Maximum number of instances that can be launched in your ECS cluster.
  InstanceType:
    Description: Main ECS instance type
    Type: String
    Default: 'm4.large'
    AllowedValues:
    - c3.large
    - c3.2xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - i2.xlarge
    - m3.medium
    - m3.large
    - m3.xlarge
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - r3.large
    - r3.xlarge
    - r3.2xlarge
    - r4.large
    - r4.xlarge
    - r4.2xlarge
    ConstraintDescription: Grab any available instance type in the spot market
  EC2SpotPrice:
    Description: Spot price for application AutoScaling Group
    Type: Number
    Default: '0.05'
Mappings:
  AWSRegionToAMI:
    us-east-1:
      AMIID: ami-a58760b3
Resources:
  DemoCluster:
    Type: AWS::ECS::Cluster
  EcsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Security Group
      VpcId: !Ref 'VpcId'
  EcsSecurityGroupALBports:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'EcsSecurityGroup'
      IpProtocol: tcp
      FromPort: '31000'
      ToPort: '61000'
      SourceSecurityGroupId: !Ref 'EcsSecurityGroup'
  InternetSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Internet facing Security Group
      VpcId: !Ref 'VpcId'
  InternetHttpPorts:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'InternetSecurityGroup'
      IpProtocol: tcp
      FromPort: '80'
      ToPort: '80'
      CidrIp: 0.0.0.0/0
  SshJumpSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ssh remote Security Group
      VpcId: !Ref 'VpcId'
  ssh0Ports:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'SshJumpSecurityGroup'
      IpProtocol: tcp
      FromPort: '22'
      ToPort: '22'
      CidrIp: 0.0.0.0/0
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: access rds port between ec2,rds
      VpcId: !Ref 'VpcId'
  dbPorts:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'RDSSecurityGroup'
      IpProtocol: tcp
      FromPort: '5432'
      ToPort: '5432'
      SourceSecurityGroupId:
        Fn::GetAtt:
        - RDSSecurityGroup
        - GroupId
  MeterDNS:
    Type: "AWS::Route53::HostedZone"
    Properties: 
      HostedZoneConfig: 
        Comment: "private hosted zone for awsmeter.io app"
      Name: "awsmeter.app"
      VPCs: 
        - VPCId: !Ref 'VpcId'
          VPCRegion: !Ref "AWS::Region"
  MeterDNSecord:
    DependsOn: 
    - MeterDNS
    - demoDB
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref 'MeterDNS'
      Name: demo-db.awsmeter.app.
      Type: CNAME
      TTL: '300'
      ResourceRecords:
      - !GetAtt demoDB.Endpoint.Address
  DemoQueue:
    Type: "AWS::SQS::Queue"
    Properties:
      QueueName: "meter-aws-blog-demo"
      DelaySeconds: 1
  demoDB:
    DependsOn: RDSSecurityGroup
    Type: "AWS::RDS::DBInstance"
    Properties: 
      AllocatedStorage: "5"
      StorageType: "gp2"
      AllowMajorVersionUpgrade: true
      AutoMinorVersionUpgrade: true
      DBName: "blog_demo"
      VPCSecurityGroups:
        - !Ref 'RDSSecurityGroup'
      DBInstanceClass: "db.t2.micro"
      Engine: "postgres"
      EngineVersion: "9.5.4"
      MasterUsername: "demo"
      MasterUserPassword: "password"
      MultiAZ: false
      PubliclyAccessible: false
  apiTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn: ECSTaskRole
    Properties:
      ContainerDefinitions:
      - Name: proxy
        Memory: 500
        Essential: false
        Image: ryohang/blog-demo-proxy
        Links:
        - api:api.awsmeter.io
        PortMappings:
        - ContainerPort: 80
      - Name: api
        Memory: 1536
        Essential: true
        Image: ryohang/blog-demo-api
      TaskRoleArn: !Ref 'ECSTaskRole'
  workerTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn: ECSTaskRole
    Properties:
      ContainerDefinitions:
      - Name: worker
        Memory: 1536
        Essential: true
        Image: ryohang/blog-demo-worker
      TaskRoleArn: !Ref 'ECSTaskRole'
  ECSDemoALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '30'
      Subnets: !Ref 'PublicSubnets'
      SecurityGroups:
      - !Ref 'InternetSecurityGroup'
      - !Ref 'EcsSecurityGroup'
  DemoALBHTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: ECSServiceRole
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref 'ECSDemoTG'
      LoadBalancerArn: !Ref 'ECSDemoALB'
      Port: 80
      Protocol: HTTP
  DemoALBHTTPListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    DependsOn: DemoALBHTTPListener
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref 'ECSDemoTG'
      Conditions:
      - Field: path-pattern
        Values:
        - "/"
      ListenerArn: !Ref 'DemoALBHTTPListener'
      Priority: 1
  ECSDemoTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn:
      - ECSDemoALB
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /elb-status
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref 'VpcId'
      TargetGroupAttributes:
      - Key: stickiness.enabled
        Value: true
      - Key: stickiness.lb_cookie.duration_seconds
        Value: 86400
  apiService:
    Type: AWS::ECS::Service
    DependsOn:
    - SpotFleet
    - DemoALBHTTPListener
    - demoDB
    Properties:
      Cluster: !Ref 'DemoCluster'
      DesiredCount: '2'
      LoadBalancers:
        - ContainerName: proxy
          ContainerPort: '80'
          TargetGroupArn: !Ref 'ECSDemoTG'
      Role: !Ref 'ECSServiceRole'
      TaskDefinition: !Ref 'apiTaskDefinition'
  workerService:
    Type: AWS::ECS::Service
    DependsOn:
    - SpotFleet
    - demoDB
    Properties:
      Cluster: !Ref 'DemoCluster'
      DesiredCount: '2'
      TaskDefinition: !Ref 'workerTaskDefinition'
  apiServiceScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: apiService
    Properties:
      MaxCapacity: 4
      MinCapacity: 1
      ResourceId: !Join ['', [service/, !Ref 'DemoCluster', /, !GetAtt [apiService, Name]]]
      RoleARN: !GetAtt [AutoscalingRole, Arn]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
  apiServiceScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: AStepPolicy
      PolicyType: StepScaling
      ScalingTargetId: !Ref 'apiServiceScalingTarget'
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
        - MetricIntervalLowerBound: 0
          ScalingAdjustment: 200
  workerServiceScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: workerService
    Properties:
      MaxCapacity: 4
      MinCapacity: 1
      ResourceId: !Join ['', [service/, !Ref 'DemoCluster', /, !GetAtt [workerService, Name]]]
      RoleARN: !GetAtt [AutoscalingRole, Arn]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
  workerServiceScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: AStepPolicy
      PolicyType: StepScaling
      ScalingTargetId: !Ref 'workerServiceScalingTarget'
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
        - MetricIntervalLowerBound: 0
          ScalingAdjustment: 200  
  DemoALB500sAlarmScaleUp:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '1'
      Statistic: Average
      Threshold: '10'
      AlarmDescription: Alarm if our ALB generates too many HTTP 500s.
      Period: '60'
      AlarmActions: [!Ref 'workerServiceScalingPolicy']
      Namespace: AWS/ApplicationELB
      Dimensions:
      - Name: ECSService
        Value: !Ref 'apiService'
      ComparisonOperator: GreaterThanThreshold
      MetricName: HTTPCode_ELB_5XX_Count
  SpotFleet:
    Type: AWS::EC2::SpotFleet
    Properties:
      SpotFleetRequestConfigData:
        IamFleetRole: !GetAtt IAMFleetRole.Arn
        SpotPrice: !Ref 'EC2SpotPrice'
        TargetCapacity: !Ref 'DesiredCapacity'
        TerminateInstancesWithExpiration: false
        AllocationStrategy: lowestPrice
        LaunchSpecifications:
          - InstanceType:  c3.large
            IamInstanceProfile:
              Arn: !GetAtt 'EC2InstanceProfile.Arn'
            ImageId: !FindInMap [ AWSRegionToAMI, !Ref 'AWS::Region', AMIID]
            SubnetId: !Join [ ',', !Ref 'PublicSubnets' ]
            KeyName: !Ref 'KeyName'
            Monitoring:
              Enabled: 'true'
            UserData:
              Fn::Base64: !Sub |
                #!/bin/bash -xe
                echo ECS_CLUSTER=${DemoCluster} >> /etc/ecs/ecs.config
                yum install -y aws-cfn-bootstrap
                /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --region ${AWS::Region}
            SecurityGroups: 
              - GroupId: !Ref 'InternetSecurityGroup'
              - GroupId: !Ref 'SshJumpSecurityGroup'
              - GroupId: !Ref 'RDSSecurityGroup'
              - GroupId: !Ref 'EcsSecurityGroup'
            SubnetId: !Join [ ',', !Ref 'PublicSubnets' ]
          - InstanceType: !Ref 'InstanceType'
            IamInstanceProfile: 
              Arn: !GetAtt 'EC2InstanceProfile.Arn'
            ImageId: !FindInMap [ AWSRegionToAMI, !Ref 'AWS::Region', AMIID]
            KeyName: !Ref 'KeyName'
            Monitoring:
              Enabled: 'true'
            UserData:
              Fn::Base64: !Sub |
                #!/bin/bash -xe
                echo ECS_CLUSTER=${DemoCluster} >> /etc/ecs/ecs.config
                yum install -y aws-cfn-bootstrap
                /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --region ${AWS::Region}
            SecurityGroups: 
              - GroupId: !Ref 'InternetSecurityGroup'
              - GroupId: !Ref 'SshJumpSecurityGroup'
              - GroupId: !Ref 'RDSSecurityGroup'
              - GroupId: !Ref 'EcsSecurityGroup'
            SubnetId: !Join [ ',', !Ref 'PublicSubnets' ]
  FleetScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: SpotFleet
    Properties:
      MaxCapacity: 10
      MinCapacity: 2
      ResourceId: !Join ['', [spot-fleet-request/, !Ref 'SpotFleet']]
      RoleARN: !GetAtt [AutoscalingRole, Arn]
      ScalableDimension: ec2:spot-fleet-request:TargetCapacity
      ServiceNamespace: ec2
  FleetScalingUpPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: SpotFleetScaleUp
      PolicyType: StepScaling
      ScalingTargetId: !Ref 'FleetScalingTarget'
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
        - MetricIntervalLowerBound: 0
          ScalingAdjustment: 2
  FleetScalingDownPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: SpotFleetScaleDown
      PolicyType: StepScaling
      ScalingTargetId: !Ref 'FleetScalingTarget'
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
        - MetricIntervalUpperBound: 0
          ScalingAdjustment: -1
  FleetCPUAlarmScaleUp:
    Type: AWS::CloudWatch::Alarm
    DependsOn: DemoCluster
    Properties:
      EvaluationPeriods: '1'
      Statistic: Average
      Threshold: '70'
      ComparisonOperator: GreaterThanThreshold
      AlarmDescription: Alarm if target instance CPU is overloaded
      Period: '60'
      AlarmActions: [!Ref 'FleetScalingUpPolicy']
      Namespace: 'AWS/ECS'
      Dimensions:
      - Name: ClusterName
        Value: !Ref 'DemoCluster'
      MetricName: CPUUtilization
  FleetCPUAlarmScaleDown:
    Type: AWS::CloudWatch::Alarm
    DependsOn: DemoCluster
    Properties:
      EvaluationPeriods: '1'
      Statistic: Average
      Threshold: '30'
      ComparisonOperator: LessThanOrEqualToThreshold
      AlarmDescription: Alarm if target instance CPU is underutlized
      Period: '120'
      AlarmActions: [!Ref 'FleetScalingDownPolicy']
      Namespace: 'AWS/ECS'
      Dimensions:
      - Name: ClusterName
        Value: !Ref 'DemoCluster'
      MetricName: CPUUtilization
  IAMFleetRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - spotfleet.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: EC2SpotPermissionAndPassRole
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ec2:DescribeImages
            - ec2:DescribeSubnets
            - ec2:RequestSpotInstances
            - ec2:TerminateInstances
            Resource:
            - "*"
          - Effect: Allow
            Action:
            - iam:PassRole
            Resource:
            - "*"
  ECSTaskRole:
    Type: AWS::IAM::Role
    DependsOn: DemoQueue
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ecs-tasks.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: ecs-task
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:  ['sqs:ListQueues','sqs:GetQueueUrl','sqs:DeleteMessage','sqs:SendMessage','sqs:ReceiveMessage','sqs:SendMessageBatch']
            Resource: "arn:aws:sqs:us-east-1:595312265488:meter-aws-blog-demo"
  ECSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ecs.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:  ['elasticloadbalancing:DeregisterInstancesFromLoadBalancer', 'elasticloadbalancing:DeregisterTargets',
              'elasticloadbalancing:Describe*', 'elasticloadbalancing:RegisterInstancesWithLoadBalancer',
              'elasticloadbalancing:RegisterTargets', 'ec2:Describe*', 'ec2:AuthorizeSecurityGroupIngress']
            Resource: "*"
  AutoscalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [application-autoscaling.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: service-autoscaling
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: ['application-autoscaling:*', 'cloudwatch:DescribeAlarms', 'cloudwatch:PutMetricAlarm',
              'ecs:DescribeServices', 'ecs:UpdateService','ec2:ModifySpotFleetRequest','ec2:DescribeSpotFleetRequests']
            Resource: '*'
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - ecs:DeregisterContainerInstance
            - ecs:DiscoverPollEndpoint
            - ecs:Poll
            - ecs:RegisterContainerInstance
            - ecs:StartTelemetrySession
            - ecs:Submit*
            - ecs:CreateCluster
            - ecr:BatchCheckLayerAvailability
            - ecr:BatchGetImage
            - ecr:GetDownloadUrlForLayer
            - ecr:GetAuthorizationToken
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: "*"
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles: [!Ref 'EC2Role']
Outputs:
  albUrl:
    Value: !Ref 'ECSDemoALB'
