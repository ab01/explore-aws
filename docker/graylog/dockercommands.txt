
docker run -d -p 9200:9200 -p 9300:9300 --net=mongo-net -v /data:/data elastisearch /elasticsearch/bin/elasticsearch -Des.config=/data/elasticsearch.yml
curl -XGET 'http://localhost:9200/_cluster/health?pretty=true'

docker run --link some-mongo:mongo --link some-elasticsearch:elasticsearch -p 9000:9000 -e GRAYLOG_WEB_ENDPOINT_URI="http://127.0.0.1:9000/api" -d graylog2/server

docker run -d -p 9000:9000 --net=mongo-net -e GRAYLOG_WEB_ENDPOINT_URI="http://52.45.134.173:9000/api" -d graylog2/server

#"http://blog.naturalint.com/creating-a-graylog-docker-container/" ==> graylog docker

##Docker installation steps ubuntu ##
sudo apt-get update
sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
sudo apt-get update
sudo apt-cache policy docker-ce
sudo apt-get install -y docker-ce
sudo sed -i 's#^ExecStart=.*#ExecStart=/usr/bin/docker daemon -H fd:// -H tcp://0.0.0.0:2375#1' /lib/systemd/system/docker.service	
sudo systemctl daemon-reload
sudo service docker restart

## Docker Machine setup

curl -L https://github.com/docker/machine/releases/download/v0.12.0/docker-machine-`uname -s`-`uname -m` >/tmp/docker-machine && chmod +x /tmp/docker-machine && sudo cp /tmp/docker-machine /usr/local/bin/docker-machine

chmod +x /usr/local/bin/docker-machine

## Swarm Cluster setup
Swarm initialized: current node (x42lt4ac49zi5s3pm3s9nqjrt) is now a manager
docker swarm join --token SWMTKN-1-1iqww495d8mi9l0xubleh9tl5lyn4ekqw5ctqcm9k3y7629z8j-22ayv6ep6n4vflw0xcsigx4q8 192.168.1.191:2377

docker service create -p 80:80 --name webserver nginx
docker service ls
docker service ps webserver
docker service scale webserver=5

#docker visualizer

docker run -it -d -p 5000:5000 -e HOST=ip-192-168-1-191 -e PORT=5000 -v /var/run/docker.sock:/var/run/docker.sock manomarks/visualizer

docker run -it -d -p 8080:8080 -e HOST=ip-192-168-1-191 -v /var/run/docker.sock:/var/run/docker.sock manomarks/visualizer

To add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions.


https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-16-04

https://www.digitalocean.com/community/tutorials/how-to-create-a-cluster-of-docker-containers-with-docker-swarm-and-digitalocean-on-ubuntu-16-04

## Docker no route to host fix page

https://linuxconfig.org/docker-dial-tcp-lookup-index-docker-io-no-such-host-fix

for i in 1 2 3; do
docker service create --name go-demo-db-rs$i \
--reserve-memory 100m \
--network go-demo \
mongo:3.2.10 mongod --replSet "rs0"
done

docker service create --name go-demo-db-util \
--reserve-memory 100m \
--network go-demo \
--mode global \
mongo:3.2.10 sleep 100000

UTIL_ID=$(docker ps -q --filter label=com.docker.swarm.service.name=go-demo-db-util)

docker exec -it $UTIL_ID sh

mongo --host go-demo-db-rs1 --eval '
rs.initiate({
_id: "rs0",
version: 1,
members: [
{_id: 0, host: "go-demo-db-rs1" },
{_id: 1, host: "go-demo-db-rs2" },
{_id: 2, host: "go-demo-db-rs3" }
]
})
'
docker run -d -p 80:80 -p 5000:5000 -p 9300:9300 -p 5601:5601 -p 9200:9200 -p 5044:5044 -v /opt/ssl:/opt:Z -v /opt/conf:/etc/logstash/conf.d:Z --name=elk elkstack
docker build -t elkstack:0.1 .

docker run -i -t -d -p 8000:80 --name=apache 4a1c44dded1f httpd -D FOREGROUND

##Jenkins BlueOcean pipelines explore
https://technologyconversations.com/2017/06/16/automating-jenkins-docker-setup/

docker service create --name jenkins \
-p 8080:8080 \
-p 50000:50000 \
-e JENKINS_OPTS="--prefix=/blue" \
--mount "type=bind,source=$PWD/docker/jenkins,target=/var/jenkins_home" \
--label com.df.notify=true \
--label com.df.distribute=true \
--label com.df.servicePath=/blue \
--label com.df.port=8080 \
--network proxy \
--reserve-memory 1500m \
jenkinsci/blueocean

##Jenkins Agent

sudo mkdir /workspace && sudo chmod 777 /workspace && exit

export USER=admin
export PASSWORD=admin
docker service create --name jenkins-agent \
-e COMMAND_OPTIONS="-master \
http://$(docker-machine ip swarm-1):8080/jenkins \
-username $USER -password $PASSWORD \
-labels 'docker' -executors 5" \
--mode global \
--constraint 'node.labels.env == jenkins-agent' \
--mount \
"type=bind,source=/var/run/docker.sock,target=/var/run/docker.sock" \
--mount \
"type=bind,source=$HOME/.docker/machine/machines,target=/machines" \
--mount "type=bind,source=/workspace,target=/workspace" \
vfarcic/jenkins-swarm-agent

docker service ps jenkins-agent
docker node update \
--label-add env=jenkins-agent \
swarm-test-4
docker service ps jenkins-agent



##Nexus Repo 

docker service create --name nexus \
-p 8081:8081 \
-e INSTALL4J_ADD_VM_PARAMS="-Xms1g -Xmx1g" \
--label com.df.notify=true \
--label com.df.distribute=true \
--label com.df.servicePath=/nexus \
--label com.df.port=8081 \
--network proxy \
--reserve-memory 400m \
sonatype/nexus3


Docker troubleshooting for error (failed to register layer: devicemapper: Error running deviceCreate (createSnapDevice) dm_task_run failed)

# systemctl stop docker.service
# thin_check /var/lib/docker/devicemapper/devicemapper/metadata
# thin_check --clear-needs-check-flag /var/lib/docker/devicemapper/devicemapper/metadata
# systemctl start docker.service



